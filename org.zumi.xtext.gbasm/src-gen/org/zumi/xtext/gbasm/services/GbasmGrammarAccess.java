/*
 * generated by Xtext 2.26.0
 */
package org.zumi.xtext.gbasm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GbasmGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AsmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.Asm");
		private final Assignment cLabelsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLabelsLabelOrConstantParserRuleCall_0 = (RuleCall)cLabelsAssignment.eContents().get(0);
		
		//Asm:
		//    (labels += LabelOrConstant)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(labels += LabelOrConstant)*
		public Assignment getLabelsAssignment() { return cLabelsAssignment; }
		
		//LabelOrConstant
		public RuleCall getLabelsLabelOrConstantParserRuleCall_0() { return cLabelsLabelOrConstantParserRuleCall_0; }
	}
	public class Register8Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.Register8");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//Register8:
		//    ('a'|'b'|'c'|'d'|'e'|'h'|'l')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('a'|'b'|'c'|'d'|'e'|'h'|'l')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'a'
		public Keyword getAKeyword_0() { return cAKeyword_0; }
		
		//'b'
		public Keyword getBKeyword_1() { return cBKeyword_1; }
		
		//'c'
		public Keyword getCKeyword_2() { return cCKeyword_2; }
		
		//'d'
		public Keyword getDKeyword_3() { return cDKeyword_3; }
		
		//'e'
		public Keyword getEKeyword_4() { return cEKeyword_4; }
		
		//'h'
		public Keyword getHKeyword_5() { return cHKeyword_5; }
		
		//'l'
		public Keyword getLKeyword_6() { return cLKeyword_6; }
	}
	public class Register16Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.Register16");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAfKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBcKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHlKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Register16:
		//    ('af'|'bc'|'de'|'hl')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('af'|'bc'|'de'|'hl')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'af'
		public Keyword getAfKeyword_0() { return cAfKeyword_0; }
		
		//'bc'
		public Keyword getBcKeyword_1() { return cBcKeyword_1; }
		
		//'de'
		public Keyword getDeKeyword_2() { return cDeKeyword_2; }
		
		//'hl'
		public Keyword getHlKeyword_3() { return cHlKeyword_3; }
	}
	public class LabelOrConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.LabelOrConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cColonKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cStatementsAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_1_0_2_0 = (RuleCall)cStatementsAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Keyword cEquKeyword_1_1_0_0 = (Keyword)cAlternatives_1_1_0.eContents().get(0);
		private final Keyword cEQUKeyword_1_1_0_1 = (Keyword)cAlternatives_1_1_0.eContents().get(1);
		private final RuleCall cExprParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//LabelOrConstant:
		//    name=ID (':'':'? (statements += Statement)* | ('equ'|'EQU') Expr)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (':'':'? (statements += Statement)* | ('equ'|'EQU') Expr)
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(':'':'? (statements += Statement)* | ('equ'|'EQU') Expr)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//':'':'? (statements += Statement)*
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_0() { return cColonKeyword_1_0_0; }
		
		//':'?
		public Keyword getColonKeyword_1_0_1() { return cColonKeyword_1_0_1; }
		
		//(statements += Statement)*
		public Assignment getStatementsAssignment_1_0_2() { return cStatementsAssignment_1_0_2; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0_2_0() { return cStatementsStatementParserRuleCall_1_0_2_0; }
		
		//('equ'|'EQU') Expr
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//('equ'|'EQU')
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//'equ'
		public Keyword getEquKeyword_1_1_0_0() { return cEquKeyword_1_1_0_0; }
		
		//'EQU'
		public Keyword getEQUKeyword_1_1_0_1() { return cEQUKeyword_1_1_0_1; }
		
		//Expr
		public RuleCall getExprParserRuleCall_1_1_1() { return cExprParserRuleCall_1_1_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalLabelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInstructionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//    LocalLabel | Instruction
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LocalLabel | Instruction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LocalLabel
		public RuleCall getLocalLabelParserRuleCall_0() { return cLocalLabelParserRuleCall_0; }
		
		//Instruction
		public RuleCall getInstructionParserRuleCall_1() { return cInstructionParserRuleCall_1; }
	}
	public class LocalLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.LocalLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LocalLabel:
		//    '.' name=ID ':'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' name=ID ':'?
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'?
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.Instruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cLdParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cLdHl1ParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cCallOrJumpParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cPushPopParserRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final RuleCall cRetParserRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		private final RuleCall cAndCpParserRuleCall_1_5 = (RuleCall)cAlternatives_1.eContents().get(5);
		private final RuleCall cIncDecParserRuleCall_1_6 = (RuleCall)cAlternatives_1.eContents().get(6);
		private final RuleCall cReptParserRuleCall_1_7 = (RuleCall)cAlternatives_1.eContents().get(7);
		private final RuleCall cRotateAParserRuleCall_1_8 = (RuleCall)cAlternatives_1.eContents().get(8);
		private final RuleCall cBitOpsParserRuleCall_1_9 = (RuleCall)cAlternatives_1.eContents().get(9);
		private final RuleCall cSwapParserRuleCall_1_10 = (RuleCall)cAlternatives_1.eContents().get(10);
		private final RuleCall cAddHlParserRuleCall_1_11 = (RuleCall)cAlternatives_1.eContents().get(11);
		
		//Instruction:
		//    WS? (
		//        Ld |
		//        LdHl1 |
		//        CallOrJump |
		//        PushPop |
		//        Ret |
		//        AndCp |
		//        IncDec |
		//        Rept |
		//        RotateA |
		//        BitOps |
		//        Swap |
		//        AddHl
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//WS? (
		//    Ld |
		//    LdHl1 |
		//    CallOrJump |
		//    PushPop |
		//    Ret |
		//    AndCp |
		//    IncDec |
		//    Rept |
		//    RotateA |
		//    BitOps |
		//    Swap |
		//    AddHl
		//)
		public Group getGroup() { return cGroup; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }
		
		//(
		//       Ld |
		//       LdHl1 |
		//       CallOrJump |
		//       PushPop |
		//       Ret |
		//       AndCp |
		//       IncDec |
		//       Rept |
		//       RotateA |
		//       BitOps |
		//       Swap |
		//       AddHl
		//   )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Ld
		public RuleCall getLdParserRuleCall_1_0() { return cLdParserRuleCall_1_0; }
		
		//LdHl1
		public RuleCall getLdHl1ParserRuleCall_1_1() { return cLdHl1ParserRuleCall_1_1; }
		
		//CallOrJump
		public RuleCall getCallOrJumpParserRuleCall_1_2() { return cCallOrJumpParserRuleCall_1_2; }
		
		//PushPop
		public RuleCall getPushPopParserRuleCall_1_3() { return cPushPopParserRuleCall_1_3; }
		
		//Ret
		public RuleCall getRetParserRuleCall_1_4() { return cRetParserRuleCall_1_4; }
		
		//AndCp
		public RuleCall getAndCpParserRuleCall_1_5() { return cAndCpParserRuleCall_1_5; }
		
		//IncDec
		public RuleCall getIncDecParserRuleCall_1_6() { return cIncDecParserRuleCall_1_6; }
		
		//Rept
		public RuleCall getReptParserRuleCall_1_7() { return cReptParserRuleCall_1_7; }
		
		//RotateA
		public RuleCall getRotateAParserRuleCall_1_8() { return cRotateAParserRuleCall_1_8; }
		
		//BitOps
		public RuleCall getBitOpsParserRuleCall_1_9() { return cBitOpsParserRuleCall_1_9; }
		
		//Swap
		public RuleCall getSwapParserRuleCall_1_10() { return cSwapParserRuleCall_1_10; }
		
		//AddHl
		public RuleCall getAddHlParserRuleCall_1_11() { return cAddHlParserRuleCall_1_11; }
	}
	public class ReptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.Rept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cReptKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cEndrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Rept:
		//    'rept' INT | 'endr'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'rept' INT | 'endr'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'rept' INT
		public Group getGroup_0() { return cGroup_0; }
		
		//'rept'
		public Keyword getReptKeyword_0_0() { return cReptKeyword_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }
		
		//'endr'
		public Keyword getEndrKeyword_1() { return cEndrKeyword_1; }
	}
	public class RotateAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.RotateA");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRlaKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRlcaKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRraKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRrcaKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//RotateA:
		//    'rla' | 'rlca' | 'rra' | 'rrca'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'rla' | 'rlca' | 'rra' | 'rrca'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'rla'
		public Keyword getRlaKeyword_0() { return cRlaKeyword_0; }
		
		//'rlca'
		public Keyword getRlcaKeyword_1() { return cRlcaKeyword_1; }
		
		//'rra'
		public Keyword getRraKeyword_2() { return cRraKeyword_2; }
		
		//'rrca'
		public Keyword getRrcaKeyword_3() { return cRrcaKeyword_3; }
	}
	public class BitOpsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.BitOps");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cBitKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cResKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cSetKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cRegister8ParserRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cHlKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		
		//BitOps:
		//    ('bit' | 'res' | 'set') INT ',' (Register8 | '[' 'hl' ']')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('bit' | 'res' | 'set') INT ',' (Register8 | '[' 'hl' ']')
		public Group getGroup() { return cGroup; }
		
		//('bit' | 'res' | 'set')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'bit'
		public Keyword getBitKeyword_0_0() { return cBitKeyword_0_0; }
		
		//'res'
		public Keyword getResKeyword_0_1() { return cResKeyword_0_1; }
		
		//'set'
		public Keyword getSetKeyword_0_2() { return cSetKeyword_0_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//(Register8 | '[' 'hl' ']')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//Register8
		public RuleCall getRegister8ParserRuleCall_3_0() { return cRegister8ParserRuleCall_3_0; }
		
		//'[' 'hl' ']'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_1_0() { return cLeftSquareBracketKeyword_3_1_0; }
		
		//'hl'
		public Keyword getHlKeyword_3_1_1() { return cHlKeyword_3_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_1_2() { return cRightSquareBracketKeyword_3_1_2; }
	}
	public class AddHlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.AddHl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHlKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cRegister16ParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//AddHl:
		//    'add' 'hl' ',' Register16
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'add' 'hl' ',' Register16
		public Group getGroup() { return cGroup; }
		
		//'add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//'hl'
		public Keyword getHlKeyword_1() { return cHlKeyword_1; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//Register16
		public RuleCall getRegister16ParserRuleCall_3() { return cRegister16ParserRuleCall_3; }
	}
	public class SwapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.Swap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cRegister8ParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cHlKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//Swap:
		//    'swap' (Register8 | '[' 'hl' ']')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'swap' (Register8 | '[' 'hl' ']')
		public Group getGroup() { return cGroup; }
		
		//'swap'
		public Keyword getSwapKeyword_0() { return cSwapKeyword_0; }
		
		//(Register8 | '[' 'hl' ']')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Register8
		public RuleCall getRegister8ParserRuleCall_1_0() { return cRegister8ParserRuleCall_1_0; }
		
		//'[' 'hl' ']'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }
		
		//'hl'
		public Keyword getHlKeyword_1_1_1() { return cHlKeyword_1_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_2() { return cRightSquareBracketKeyword_1_1_2; }
	}
	public class IncDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.IncDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIncKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDecKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cRegister8ParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cRegister16ParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cHlKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		
		//IncDec:
		//    ('inc'|'dec')
		//    (Register8 | Register16 |'[' 'hl' ']')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('inc'|'dec')
		//(Register8 | Register16 |'[' 'hl' ']')
		public Group getGroup() { return cGroup; }
		
		//('inc'|'dec')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'inc'
		public Keyword getIncKeyword_0_0() { return cIncKeyword_0_0; }
		
		//'dec'
		public Keyword getDecKeyword_0_1() { return cDecKeyword_0_1; }
		
		//(Register8 | Register16 |'[' 'hl' ']')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Register8
		public RuleCall getRegister8ParserRuleCall_1_0() { return cRegister8ParserRuleCall_1_0; }
		
		//Register16
		public RuleCall getRegister16ParserRuleCall_1_1() { return cRegister16ParserRuleCall_1_1; }
		
		//'[' 'hl' ']'
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }
		
		//'hl'
		public Keyword getHlKeyword_1_2_1() { return cHlKeyword_1_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2_2() { return cRightSquareBracketKeyword_1_2_2; }
	}
	public class LdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.Ld");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cRegister8ParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final RuleCall cRegister8ParserRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cRegister8ParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final RuleCall cRegister8ParserRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final RuleCall cBankReferenceParserRuleCall_1_2_2 = (RuleCall)cGroup_1_2.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final RuleCall cRegister16ParserRuleCall_1_3_0 = (RuleCall)cGroup_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_3_2 = (RuleCall)cGroup_1_3.eContents().get(2);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final RuleCall cRegister16ParserRuleCall_1_4_0 = (RuleCall)cGroup_1_4.eContents().get(0);
		private final Keyword cCommaKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Alternatives cAlternatives_1_4_2 = (Alternatives)cGroup_1_4.eContents().get(2);
		private final RuleCall cLabelReferenceParserRuleCall_1_4_2_0 = (RuleCall)cAlternatives_1_4_2.eContents().get(0);
		private final Group cGroup_1_4_2_1 = (Group)cAlternatives_1_4_2.eContents().get(1);
		private final Keyword cFullStopKeyword_1_4_2_1_0 = (Keyword)cGroup_1_4_2_1.eContents().get(0);
		private final Assignment cLocLabelAssignment_1_4_2_1_1 = (Assignment)cGroup_1_4_2_1.eContents().get(1);
		private final CrossReference cLocLabelLocalLabelCrossReference_1_4_2_1_1_0 = (CrossReference)cLocLabelAssignment_1_4_2_1_1.eContents().get(0);
		private final RuleCall cLocLabelLocalLabelIDTerminalRuleCall_1_4_2_1_1_0_1 = (RuleCall)cLocLabelLocalLabelCrossReference_1_4_2_1_1_0.eContents().get(1);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Keyword cAKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Keyword cCommaKeyword_1_5_1 = (Keyword)cGroup_1_5.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_5_2 = (Keyword)cGroup_1_5.eContents().get(2);
		private final RuleCall cLabelReferenceParserRuleCall_1_5_3 = (RuleCall)cGroup_1_5.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_1_5_4 = (Keyword)cGroup_1_5.eContents().get(4);
		private final Group cGroup_1_6 = (Group)cAlternatives_1.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final RuleCall cLabelReferenceParserRuleCall_1_6_1 = (RuleCall)cGroup_1_6.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_6_2 = (Keyword)cGroup_1_6.eContents().get(2);
		private final Keyword cCommaKeyword_1_6_3 = (Keyword)cGroup_1_6.eContents().get(3);
		private final Keyword cAKeyword_1_6_4 = (Keyword)cGroup_1_6.eContents().get(4);
		
		//Ld:
		//    'ld' (
		//        Register8 ',' Register8 |
		//        Register8 ',' INT |
		//        Register8 ',' BankReference |
		//        Register16 ',' INT |
		//        Register16 ',' (LabelReference | '.' locLabel=[LocalLabel]) |
		//        'a' ',' '[' (LabelReference) ']' |
		//        '[' (LabelReference) ']' ',' 'a'
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ld' (
		//    Register8 ',' Register8 |
		//    Register8 ',' INT |
		//    Register8 ',' BankReference |
		//    Register16 ',' INT |
		//    Register16 ',' (LabelReference | '.' locLabel=[LocalLabel]) |
		//    'a' ',' '[' (LabelReference) ']' |
		//    '[' (LabelReference) ']' ',' 'a'
		//)
		public Group getGroup() { return cGroup; }
		
		//'ld'
		public Keyword getLdKeyword_0() { return cLdKeyword_0; }
		
		//(
		//       Register8 ',' Register8 |
		//       Register8 ',' INT |
		//       Register8 ',' BankReference |
		//       Register16 ',' INT |
		//       Register16 ',' (LabelReference | '.' locLabel=[LocalLabel]) |
		//       'a' ',' '[' (LabelReference) ']' |
		//       '[' (LabelReference) ']' ',' 'a'
		//   )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Register8 ',' Register8
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//Register8
		public RuleCall getRegister8ParserRuleCall_1_0_0() { return cRegister8ParserRuleCall_1_0_0; }
		
		//','
		public Keyword getCommaKeyword_1_0_1() { return cCommaKeyword_1_0_1; }
		
		//Register8
		public RuleCall getRegister8ParserRuleCall_1_0_2() { return cRegister8ParserRuleCall_1_0_2; }
		
		//Register8 ',' INT
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//Register8
		public RuleCall getRegister8ParserRuleCall_1_1_0() { return cRegister8ParserRuleCall_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_1_1() { return cCommaKeyword_1_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1_2() { return cINTTerminalRuleCall_1_1_2; }
		
		//Register8 ',' BankReference
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//Register8
		public RuleCall getRegister8ParserRuleCall_1_2_0() { return cRegister8ParserRuleCall_1_2_0; }
		
		//','
		public Keyword getCommaKeyword_1_2_1() { return cCommaKeyword_1_2_1; }
		
		//BankReference
		public RuleCall getBankReferenceParserRuleCall_1_2_2() { return cBankReferenceParserRuleCall_1_2_2; }
		
		//Register16 ',' INT
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//Register16
		public RuleCall getRegister16ParserRuleCall_1_3_0() { return cRegister16ParserRuleCall_1_3_0; }
		
		//','
		public Keyword getCommaKeyword_1_3_1() { return cCommaKeyword_1_3_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_3_2() { return cINTTerminalRuleCall_1_3_2; }
		
		//Register16 ',' (LabelReference | '.' locLabel=[LocalLabel])
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//Register16
		public RuleCall getRegister16ParserRuleCall_1_4_0() { return cRegister16ParserRuleCall_1_4_0; }
		
		//','
		public Keyword getCommaKeyword_1_4_1() { return cCommaKeyword_1_4_1; }
		
		//(LabelReference | '.' locLabel=[LocalLabel])
		public Alternatives getAlternatives_1_4_2() { return cAlternatives_1_4_2; }
		
		//LabelReference
		public RuleCall getLabelReferenceParserRuleCall_1_4_2_0() { return cLabelReferenceParserRuleCall_1_4_2_0; }
		
		//'.' locLabel=[LocalLabel]
		public Group getGroup_1_4_2_1() { return cGroup_1_4_2_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_4_2_1_0() { return cFullStopKeyword_1_4_2_1_0; }
		
		//locLabel=[LocalLabel]
		public Assignment getLocLabelAssignment_1_4_2_1_1() { return cLocLabelAssignment_1_4_2_1_1; }
		
		//[LocalLabel]
		public CrossReference getLocLabelLocalLabelCrossReference_1_4_2_1_1_0() { return cLocLabelLocalLabelCrossReference_1_4_2_1_1_0; }
		
		//ID
		public RuleCall getLocLabelLocalLabelIDTerminalRuleCall_1_4_2_1_1_0_1() { return cLocLabelLocalLabelIDTerminalRuleCall_1_4_2_1_1_0_1; }
		
		//'a' ',' '[' (LabelReference) ']'
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//'a'
		public Keyword getAKeyword_1_5_0() { return cAKeyword_1_5_0; }
		
		//','
		public Keyword getCommaKeyword_1_5_1() { return cCommaKeyword_1_5_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_5_2() { return cLeftSquareBracketKeyword_1_5_2; }
		
		//(LabelReference)
		public RuleCall getLabelReferenceParserRuleCall_1_5_3() { return cLabelReferenceParserRuleCall_1_5_3; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_5_4() { return cRightSquareBracketKeyword_1_5_4; }
		
		//'[' (LabelReference) ']' ',' 'a'
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_6_0() { return cLeftSquareBracketKeyword_1_6_0; }
		
		//(LabelReference)
		public RuleCall getLabelReferenceParserRuleCall_1_6_1() { return cLabelReferenceParserRuleCall_1_6_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_6_2() { return cRightSquareBracketKeyword_1_6_2; }
		
		//','
		public Keyword getCommaKeyword_1_6_3() { return cCommaKeyword_1_6_3; }
		
		//'a'
		public Keyword getAKeyword_1_6_4() { return cAKeyword_1_6_4; }
	}
	public class LdHl1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.LdHl1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cIKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cDKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cHlKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Keyword cAKeyword_2_0_4 = (Keyword)cGroup_2_0.eContents().get(4);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cAKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Keyword cHlKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		
		//LdHl1:
		//    'ld' ('i'|'d') (
		//        '[' 'hl' ']' ',' 'a' |
		//        'a' ',' '[' 'hl' ']'
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ld' ('i'|'d') (
		//    '[' 'hl' ']' ',' 'a' |
		//    'a' ',' '[' 'hl' ']'
		//)
		public Group getGroup() { return cGroup; }
		
		//'ld'
		public Keyword getLdKeyword_0() { return cLdKeyword_0; }
		
		//('i'|'d')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'i'
		public Keyword getIKeyword_1_0() { return cIKeyword_1_0; }
		
		//'d'
		public Keyword getDKeyword_1_1() { return cDKeyword_1_1; }
		
		//(
		//       '[' 'hl' ']' ',' 'a' |
		//       'a' ',' '[' 'hl' ']'
		//   )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'[' 'hl' ']' ',' 'a'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0_0() { return cLeftSquareBracketKeyword_2_0_0; }
		
		//'hl'
		public Keyword getHlKeyword_2_0_1() { return cHlKeyword_2_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_0_2() { return cRightSquareBracketKeyword_2_0_2; }
		
		//','
		public Keyword getCommaKeyword_2_0_3() { return cCommaKeyword_2_0_3; }
		
		//'a'
		public Keyword getAKeyword_2_0_4() { return cAKeyword_2_0_4; }
		
		//'a' ',' '[' 'hl' ']'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'a'
		public Keyword getAKeyword_2_1_0() { return cAKeyword_2_1_0; }
		
		//','
		public Keyword getCommaKeyword_2_1_1() { return cCommaKeyword_2_1_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1_2() { return cLeftSquareBracketKeyword_2_1_2; }
		
		//'hl'
		public Keyword getHlKeyword_2_1_3() { return cHlKeyword_2_1_3; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_1_4() { return cRightSquareBracketKeyword_2_1_4; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expr:
		//    STRING | INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class LabelReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.LabelReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefLabelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefLabelLabelOrConstantCrossReference_0_0 = (CrossReference)cRefLabelAssignment_0.eContents().get(0);
		private final RuleCall cRefLabelLabelOrConstantIDTerminalRuleCall_0_0_1 = (RuleCall)cRefLabelLabelOrConstantCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//LabelReference:
		//    (refLabel=[LabelOrConstant]) (('+'|'-') INT)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(refLabel=[LabelOrConstant]) (('+'|'-') INT)?
		public Group getGroup() { return cGroup; }
		
		//(refLabel=[LabelOrConstant])
		public Assignment getRefLabelAssignment_0() { return cRefLabelAssignment_0; }
		
		//[LabelOrConstant]
		public CrossReference getRefLabelLabelOrConstantCrossReference_0_0() { return cRefLabelLabelOrConstantCrossReference_0_0; }
		
		//ID
		public RuleCall getRefLabelLabelOrConstantIDTerminalRuleCall_0_0_1() { return cRefLabelLabelOrConstantIDTerminalRuleCall_0_0_1; }
		
		//(('+'|'-') INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//('+'|'-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	public class BankReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.BankReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBANKKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBankLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cBankLabelLabelOrConstantCrossReference_2_0 = (CrossReference)cBankLabelAssignment_2.eContents().get(0);
		private final RuleCall cBankLabelLabelOrConstantIDTerminalRuleCall_2_0_1 = (RuleCall)cBankLabelLabelOrConstantCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BankReference:
		//    'BANK' '(' bankLabel=[LabelOrConstant] ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'BANK' '(' bankLabel=[LabelOrConstant] ')'
		public Group getGroup() { return cGroup; }
		
		//'BANK'
		public Keyword getBANKKeyword_0() { return cBANKKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//bankLabel=[LabelOrConstant]
		public Assignment getBankLabelAssignment_2() { return cBankLabelAssignment_2; }
		
		//[LabelOrConstant]
		public CrossReference getBankLabelLabelOrConstantCrossReference_2_0() { return cBankLabelLabelOrConstantCrossReference_2_0; }
		
		//ID
		public RuleCall getBankLabelLabelOrConstantIDTerminalRuleCall_2_0_1() { return cBankLabelLabelOrConstantIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PushPopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.PushPop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPushKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cPopKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cRegister16ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PushPop:
		//    ('push'|'pop') Register16
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('push'|'pop') Register16
		public Group getGroup() { return cGroup; }
		
		//('push'|'pop')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'push'
		public Keyword getPushKeyword_0_0() { return cPushKeyword_0_0; }
		
		//'pop'
		public Keyword getPopKeyword_0_1() { return cPopKeyword_0_1; }
		
		//Register16
		public RuleCall getRegister16ParserRuleCall_1() { return cRegister16ParserRuleCall_1; }
	}
	public class AndCpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.AndCp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAndKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCpKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cRegister8ParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Assignment cAndCpLabelRefAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cAndCpLabelRefLabelOrConstantCrossReference_2_1_0 = (CrossReference)cAndCpLabelRefAssignment_2_1.eContents().get(0);
		private final RuleCall cAndCpLabelRefLabelOrConstantIDTerminalRuleCall_2_1_0_1 = (RuleCall)cAndCpLabelRefLabelOrConstantCrossReference_2_1_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		
		//AndCp:
		//    ('and'|'cp') ('a' ',')? (Register8 | andCpLabelRef=[LabelOrConstant] | INT)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('and'|'cp') ('a' ',')? (Register8 | andCpLabelRef=[LabelOrConstant] | INT)
		public Group getGroup() { return cGroup; }
		
		//('and'|'cp')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'and'
		public Keyword getAndKeyword_0_0() { return cAndKeyword_0_0; }
		
		//'cp'
		public Keyword getCpKeyword_0_1() { return cCpKeyword_0_1; }
		
		//('a' ',')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'a'
		public Keyword getAKeyword_1_0() { return cAKeyword_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//(Register8 | andCpLabelRef=[LabelOrConstant] | INT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//Register8
		public RuleCall getRegister8ParserRuleCall_2_0() { return cRegister8ParserRuleCall_2_0; }
		
		//andCpLabelRef=[LabelOrConstant]
		public Assignment getAndCpLabelRefAssignment_2_1() { return cAndCpLabelRefAssignment_2_1; }
		
		//[LabelOrConstant]
		public CrossReference getAndCpLabelRefLabelOrConstantCrossReference_2_1_0() { return cAndCpLabelRefLabelOrConstantCrossReference_2_1_0; }
		
		//ID
		public RuleCall getAndCpLabelRefLabelOrConstantIDTerminalRuleCall_2_1_0_1() { return cAndCpLabelRefLabelOrConstantIDTerminalRuleCall_2_1_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_2() { return cINTTerminalRuleCall_2_2; }
	}
	public class RetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.Ret");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cNcKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cNzKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cCKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cZKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		
		//Ret:
		//    'ret' ('nc'|'nz'|'c'|'z')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ret' ('nc'|'nz'|'c'|'z')?
		public Group getGroup() { return cGroup; }
		
		//'ret'
		public Keyword getRetKeyword_0() { return cRetKeyword_0; }
		
		//('nc'|'nz'|'c'|'z')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'nc'
		public Keyword getNcKeyword_1_0() { return cNcKeyword_1_0; }
		
		//'nz'
		public Keyword getNzKeyword_1_1() { return cNzKeyword_1_1; }
		
		//'c'
		public Keyword getCKeyword_1_2() { return cCKeyword_1_2; }
		
		//'z'
		public Keyword getZKeyword_1_3() { return cZKeyword_1_3; }
	}
	public class CallOrJumpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.CallOrJump");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCallKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cJrKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cJpKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cNcKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cNzKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cCKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Keyword cZKeyword_1_0_3 = (Keyword)cAlternatives_1_0.eContents().get(3);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cAbsLabelAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cAbsLabelLabelOrConstantCrossReference_2_0_0 = (CrossReference)cAbsLabelAssignment_2_0.eContents().get(0);
		private final RuleCall cAbsLabelLabelOrConstantIDTerminalRuleCall_2_0_0_1 = (RuleCall)cAbsLabelLabelOrConstantCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLocLabelAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cLocLabelLocalLabelCrossReference_2_1_1_0 = (CrossReference)cLocLabelAssignment_2_1_1.eContents().get(0);
		private final RuleCall cLocLabelLocalLabelIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cLocLabelLocalLabelCrossReference_2_1_1_0.eContents().get(1);
		
		//CallOrJump:
		//    ('call'|'jr'|'jp') (('nc'|'nz'|'c'|'z') ',')? (absLabel=[LabelOrConstant] | '.' locLabel=[LocalLabel])
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('call'|'jr'|'jp') (('nc'|'nz'|'c'|'z') ',')? (absLabel=[LabelOrConstant] | '.' locLabel=[LocalLabel])
		public Group getGroup() { return cGroup; }
		
		//('call'|'jr'|'jp')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'call'
		public Keyword getCallKeyword_0_0() { return cCallKeyword_0_0; }
		
		//'jr'
		public Keyword getJrKeyword_0_1() { return cJrKeyword_0_1; }
		
		//'jp'
		public Keyword getJpKeyword_0_2() { return cJpKeyword_0_2; }
		
		//(('nc'|'nz'|'c'|'z') ',')?
		public Group getGroup_1() { return cGroup_1; }
		
		//('nc'|'nz'|'c'|'z')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'nc'
		public Keyword getNcKeyword_1_0_0() { return cNcKeyword_1_0_0; }
		
		//'nz'
		public Keyword getNzKeyword_1_0_1() { return cNzKeyword_1_0_1; }
		
		//'c'
		public Keyword getCKeyword_1_0_2() { return cCKeyword_1_0_2; }
		
		//'z'
		public Keyword getZKeyword_1_0_3() { return cZKeyword_1_0_3; }
		
		//','
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//(absLabel=[LabelOrConstant] | '.' locLabel=[LocalLabel])
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//absLabel=[LabelOrConstant]
		public Assignment getAbsLabelAssignment_2_0() { return cAbsLabelAssignment_2_0; }
		
		//[LabelOrConstant]
		public CrossReference getAbsLabelLabelOrConstantCrossReference_2_0_0() { return cAbsLabelLabelOrConstantCrossReference_2_0_0; }
		
		//ID
		public RuleCall getAbsLabelLabelOrConstantIDTerminalRuleCall_2_0_0_1() { return cAbsLabelLabelOrConstantIDTerminalRuleCall_2_0_0_1; }
		
		//'.' locLabel=[LocalLabel]
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1_0() { return cFullStopKeyword_2_1_0; }
		
		//locLabel=[LocalLabel]
		public Assignment getLocLabelAssignment_2_1_1() { return cLocLabelAssignment_2_1_1; }
		
		//[LocalLabel]
		public CrossReference getLocLabelLocalLabelCrossReference_2_1_1_0() { return cLocLabelLocalLabelCrossReference_2_1_1_0; }
		
		//ID
		public RuleCall getLocLabelLocalLabelIDTerminalRuleCall_2_1_1_0_1() { return cLocLabelLocalLabelIDTerminalRuleCall_2_1_1_0_1; }
	}
	
	
	private final AsmElements pAsm;
	private final TerminalRule tINT;
	private final TerminalRule tSL_COMMENT;
	private final Register8Elements pRegister8;
	private final Register16Elements pRegister16;
	private final LabelOrConstantElements pLabelOrConstant;
	private final StatementElements pStatement;
	private final LocalLabelElements pLocalLabel;
	private final InstructionElements pInstruction;
	private final ReptElements pRept;
	private final RotateAElements pRotateA;
	private final BitOpsElements pBitOps;
	private final AddHlElements pAddHl;
	private final SwapElements pSwap;
	private final IncDecElements pIncDec;
	private final LdElements pLd;
	private final LdHl1Elements pLdHl1;
	private final ExprElements pExpr;
	private final LabelReferenceElements pLabelReference;
	private final BankReferenceElements pBankReference;
	private final PushPopElements pPushPop;
	private final AndCpElements pAndCp;
	private final RetElements pRet;
	private final CallOrJumpElements pCallOrJump;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GbasmGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAsm = new AsmElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.INT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.zumi.xtext.gbasm.Gbasm.SL_COMMENT");
		this.pRegister8 = new Register8Elements();
		this.pRegister16 = new Register16Elements();
		this.pLabelOrConstant = new LabelOrConstantElements();
		this.pStatement = new StatementElements();
		this.pLocalLabel = new LocalLabelElements();
		this.pInstruction = new InstructionElements();
		this.pRept = new ReptElements();
		this.pRotateA = new RotateAElements();
		this.pBitOps = new BitOpsElements();
		this.pAddHl = new AddHlElements();
		this.pSwap = new SwapElements();
		this.pIncDec = new IncDecElements();
		this.pLd = new LdElements();
		this.pLdHl1 = new LdHl1Elements();
		this.pExpr = new ExprElements();
		this.pLabelReference = new LabelReferenceElements();
		this.pBankReference = new BankReferenceElements();
		this.pPushPop = new PushPopElements();
		this.pAndCp = new AndCpElements();
		this.pRet = new RetElements();
		this.pCallOrJump = new CallOrJumpElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.zumi.xtext.gbasm.Gbasm".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Asm:
	//    (labels += LabelOrConstant)*
	//;
	public AsmElements getAsmAccess() {
		return pAsm;
	}
	
	public ParserRule getAsmRule() {
		return getAsmAccess().getRule();
	}
	
	//@Override
	//terminal INT returns ecore::EInt:
	//    ('0'..'9')+|'$'('0'..'9'|'a'..'f')+|'%'('0'|'1')+
	//;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//@Override
	//terminal SL_COMMENT:
	//    ';' !('\n'|'\r')* ('\r'? '\n')?
	//;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//Register8:
	//    ('a'|'b'|'c'|'d'|'e'|'h'|'l')
	//;
	public Register8Elements getRegister8Access() {
		return pRegister8;
	}
	
	public ParserRule getRegister8Rule() {
		return getRegister8Access().getRule();
	}
	
	//Register16:
	//    ('af'|'bc'|'de'|'hl')
	//;
	public Register16Elements getRegister16Access() {
		return pRegister16;
	}
	
	public ParserRule getRegister16Rule() {
		return getRegister16Access().getRule();
	}
	
	//LabelOrConstant:
	//    name=ID (':'':'? (statements += Statement)* | ('equ'|'EQU') Expr)
	//;
	public LabelOrConstantElements getLabelOrConstantAccess() {
		return pLabelOrConstant;
	}
	
	public ParserRule getLabelOrConstantRule() {
		return getLabelOrConstantAccess().getRule();
	}
	
	//Statement:
	//    LocalLabel | Instruction
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//LocalLabel:
	//    '.' name=ID ':'?
	//;
	public LocalLabelElements getLocalLabelAccess() {
		return pLocalLabel;
	}
	
	public ParserRule getLocalLabelRule() {
		return getLocalLabelAccess().getRule();
	}
	
	//Instruction:
	//    WS? (
	//        Ld |
	//        LdHl1 |
	//        CallOrJump |
	//        PushPop |
	//        Ret |
	//        AndCp |
	//        IncDec |
	//        Rept |
	//        RotateA |
	//        BitOps |
	//        Swap |
	//        AddHl
	//    )
	//;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Rept:
	//    'rept' INT | 'endr'
	//;
	public ReptElements getReptAccess() {
		return pRept;
	}
	
	public ParserRule getReptRule() {
		return getReptAccess().getRule();
	}
	
	//RotateA:
	//    'rla' | 'rlca' | 'rra' | 'rrca'
	//;
	public RotateAElements getRotateAAccess() {
		return pRotateA;
	}
	
	public ParserRule getRotateARule() {
		return getRotateAAccess().getRule();
	}
	
	//BitOps:
	//    ('bit' | 'res' | 'set') INT ',' (Register8 | '[' 'hl' ']')
	//;
	public BitOpsElements getBitOpsAccess() {
		return pBitOps;
	}
	
	public ParserRule getBitOpsRule() {
		return getBitOpsAccess().getRule();
	}
	
	//AddHl:
	//    'add' 'hl' ',' Register16
	//;
	public AddHlElements getAddHlAccess() {
		return pAddHl;
	}
	
	public ParserRule getAddHlRule() {
		return getAddHlAccess().getRule();
	}
	
	//Swap:
	//    'swap' (Register8 | '[' 'hl' ']')
	//;
	public SwapElements getSwapAccess() {
		return pSwap;
	}
	
	public ParserRule getSwapRule() {
		return getSwapAccess().getRule();
	}
	
	//IncDec:
	//    ('inc'|'dec')
	//    (Register8 | Register16 |'[' 'hl' ']')
	//;
	public IncDecElements getIncDecAccess() {
		return pIncDec;
	}
	
	public ParserRule getIncDecRule() {
		return getIncDecAccess().getRule();
	}
	
	//Ld:
	//    'ld' (
	//        Register8 ',' Register8 |
	//        Register8 ',' INT |
	//        Register8 ',' BankReference |
	//        Register16 ',' INT |
	//        Register16 ',' (LabelReference | '.' locLabel=[LocalLabel]) |
	//        'a' ',' '[' (LabelReference) ']' |
	//        '[' (LabelReference) ']' ',' 'a'
	//    )
	//;
	public LdElements getLdAccess() {
		return pLd;
	}
	
	public ParserRule getLdRule() {
		return getLdAccess().getRule();
	}
	
	//LdHl1:
	//    'ld' ('i'|'d') (
	//        '[' 'hl' ']' ',' 'a' |
	//        'a' ',' '[' 'hl' ']'
	//    )
	//;
	public LdHl1Elements getLdHl1Access() {
		return pLdHl1;
	}
	
	public ParserRule getLdHl1Rule() {
		return getLdHl1Access().getRule();
	}
	
	//Expr:
	//    STRING | INT
	//;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//LabelReference:
	//    (refLabel=[LabelOrConstant]) (('+'|'-') INT)?
	//;
	public LabelReferenceElements getLabelReferenceAccess() {
		return pLabelReference;
	}
	
	public ParserRule getLabelReferenceRule() {
		return getLabelReferenceAccess().getRule();
	}
	
	//BankReference:
	//    'BANK' '(' bankLabel=[LabelOrConstant] ')'
	//;
	public BankReferenceElements getBankReferenceAccess() {
		return pBankReference;
	}
	
	public ParserRule getBankReferenceRule() {
		return getBankReferenceAccess().getRule();
	}
	
	//PushPop:
	//    ('push'|'pop') Register16
	//;
	public PushPopElements getPushPopAccess() {
		return pPushPop;
	}
	
	public ParserRule getPushPopRule() {
		return getPushPopAccess().getRule();
	}
	
	//AndCp:
	//    ('and'|'cp') ('a' ',')? (Register8 | andCpLabelRef=[LabelOrConstant] | INT)
	//;
	public AndCpElements getAndCpAccess() {
		return pAndCp;
	}
	
	public ParserRule getAndCpRule() {
		return getAndCpAccess().getRule();
	}
	
	//Ret:
	//    'ret' ('nc'|'nz'|'c'|'z')?
	//;
	public RetElements getRetAccess() {
		return pRet;
	}
	
	public ParserRule getRetRule() {
		return getRetAccess().getRule();
	}
	
	//CallOrJump:
	//    ('call'|'jr'|'jp') (('nc'|'nz'|'c'|'z') ',')? (absLabel=[LabelOrConstant] | '.' locLabel=[LocalLabel])
	//;
	public CallOrJumpElements getCallOrJumpAccess() {
		return pCallOrJump;
	}
	
	public ParserRule getCallOrJumpRule() {
		return getCallOrJumpAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
