/*
 * generated by Xtext 2.26.0
 */
package org.zumi.xtext.gbasm.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.zumi.xtext.gbasm.services.GbasmGrammarAccess;

@SuppressWarnings("all")
public class GbasmSyntacticSequencer extends AbstractSyntacticSequencer {

	protected GbasmGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AndCp_AndKeyword_0_0_or_CpKeyword_0_1;
	protected AbstractElementAlias match_AndCp_INTTerminalRuleCall_2_2_or_Register8ParserRuleCall_2_0;
	protected AbstractElementAlias match_AndCp_Instruction_Ld_AddHlParserRuleCall_1_11_or_BitOpsParserRuleCall_1_9_or_IncDecParserRuleCall_1_6_or_LdHl1ParserRuleCall_1_1_or_PushPopParserRuleCall_1_3_or_ReptParserRuleCall_1_7_or_RetParserRuleCall_1_4_or_RotateAParserRuleCall_1_8_or_SwapParserRuleCall_1_10_or___LdKeyword_0_____Register16ParserRuleCall_1_3_0_CommaKeyword_1_3_1_INTTerminalRuleCall_1_3_2___or___Register8ParserRuleCall_1_0_0_CommaKeyword_1_0_1_Register8ParserRuleCall_1_0_2___or___Register8ParserRuleCall_1_1_0_CommaKeyword_1_1_1_INTTerminalRuleCall_1_1_2_______or_____AndKeyword_0_0_or_CpKeyword_0_1_____AKeyword_1_0_CommaKeyword_1_1__q___INTTerminalRuleCall_2_2_or_Register8ParserRuleCall_2_0____;
	protected AbstractElementAlias match_AndCp___AKeyword_1_0_CommaKeyword_1_1__q;
	protected AbstractElementAlias match_CallOrJump_CallKeyword_0_0_or_JpKeyword_0_2_or_JrKeyword_0_1;
	protected AbstractElementAlias match_CallOrJump_____CKeyword_1_0_2_or_NcKeyword_1_0_0_or_NzKeyword_1_0_1_or_ZKeyword_1_0_3___CommaKeyword_1_1__q;
	protected AbstractElementAlias match_Instruction_WSTerminalRuleCall_0_q;
	protected AbstractElementAlias match_LabelOrConstant_ColonKeyword_1_0_1_q;
	protected AbstractElementAlias match_LabelOrConstant___ColonKeyword_1_0_0_ColonKeyword_1_0_1_q___or_____EQUKeyword_1_1_0_1_or_EquKeyword_1_1_0_0___ExprParserRuleCall_1_1_1__;
	protected AbstractElementAlias match_LabelReference_____HyphenMinusKeyword_1_0_1_or_PlusSignKeyword_1_0_0___INTTerminalRuleCall_1_1__q;
	protected AbstractElementAlias match_Ld_LeftSquareBracketKeyword_1_6_0_or___AKeyword_1_5_0_CommaKeyword_1_5_1_LeftSquareBracketKeyword_1_5_2___or___Register16ParserRuleCall_1_4_0_CommaKeyword_1_4_1__;
	protected AbstractElementAlias match_Ld___Register16ParserRuleCall_1_3_0_CommaKeyword_1_3_1_INTTerminalRuleCall_1_3_2___or___Register8ParserRuleCall_1_0_0_CommaKeyword_1_0_1_Register8ParserRuleCall_1_0_2___or___Register8ParserRuleCall_1_1_0_CommaKeyword_1_1_1_INTTerminalRuleCall_1_1_2__;
	protected AbstractElementAlias match_LocalLabel_ColonKeyword_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (GbasmGrammarAccess) access;
		match_AndCp_AndKeyword_0_0_or_CpKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAndCpAccess().getAndKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getAndCpAccess().getCpKeyword_0_1()));
		match_AndCp_INTTerminalRuleCall_2_2_or_Register8ParserRuleCall_2_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAndCpAccess().getINTTerminalRuleCall_2_2()), new TokenAlias(false, false, grammarAccess.getAndCpAccess().getRegister8ParserRuleCall_2_0()));
		match_AndCp_Instruction_Ld_AddHlParserRuleCall_1_11_or_BitOpsParserRuleCall_1_9_or_IncDecParserRuleCall_1_6_or_LdHl1ParserRuleCall_1_1_or_PushPopParserRuleCall_1_3_or_ReptParserRuleCall_1_7_or_RetParserRuleCall_1_4_or_RotateAParserRuleCall_1_8_or_SwapParserRuleCall_1_10_or___LdKeyword_0_____Register16ParserRuleCall_1_3_0_CommaKeyword_1_3_1_INTTerminalRuleCall_1_3_2___or___Register8ParserRuleCall_1_0_0_CommaKeyword_1_0_1_Register8ParserRuleCall_1_0_2___or___Register8ParserRuleCall_1_1_0_CommaKeyword_1_1_1_INTTerminalRuleCall_1_1_2_______or_____AndKeyword_0_0_or_CpKeyword_0_1_____AKeyword_1_0_CommaKeyword_1_1__q___INTTerminalRuleCall_2_2_or_Register8ParserRuleCall_2_0____ = new AlternativeAlias(false, false, new GroupAlias(false, false, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAndCpAccess().getAndKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getAndCpAccess().getCpKeyword_0_1())), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAndCpAccess().getAKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getAndCpAccess().getCommaKeyword_1_1())), new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAndCpAccess().getINTTerminalRuleCall_2_2()), new TokenAlias(false, false, grammarAccess.getAndCpAccess().getRegister8ParserRuleCall_2_0()))), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getLdAccess().getLdKeyword_0()), new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getLdAccess().getRegister16ParserRuleCall_1_3_0()), new TokenAlias(false, false, grammarAccess.getLdAccess().getCommaKeyword_1_3_1()), new TokenAlias(false, false, grammarAccess.getLdAccess().getINTTerminalRuleCall_1_3_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getLdAccess().getRegister8ParserRuleCall_1_0_0()), new TokenAlias(false, false, grammarAccess.getLdAccess().getCommaKeyword_1_0_1()), new TokenAlias(false, false, grammarAccess.getLdAccess().getRegister8ParserRuleCall_1_0_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getLdAccess().getRegister8ParserRuleCall_1_1_0()), new TokenAlias(false, false, grammarAccess.getLdAccess().getCommaKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getLdAccess().getINTTerminalRuleCall_1_1_2())))), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getAddHlParserRuleCall_1_11()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getBitOpsParserRuleCall_1_9()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getIncDecParserRuleCall_1_6()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getLdHl1ParserRuleCall_1_1()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getPushPopParserRuleCall_1_3()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getReptParserRuleCall_1_7()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getRetParserRuleCall_1_4()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getRotateAParserRuleCall_1_8()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getSwapParserRuleCall_1_10()));
		match_AndCp___AKeyword_1_0_CommaKeyword_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAndCpAccess().getAKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getAndCpAccess().getCommaKeyword_1_1()));
		match_CallOrJump_CallKeyword_0_0_or_JpKeyword_0_2_or_JrKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCallOrJumpAccess().getCallKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getCallOrJumpAccess().getJpKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getCallOrJumpAccess().getJrKeyword_0_1()));
		match_CallOrJump_____CKeyword_1_0_2_or_NcKeyword_1_0_0_or_NzKeyword_1_0_1_or_ZKeyword_1_0_3___CommaKeyword_1_1__q = new GroupAlias(false, true, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCallOrJumpAccess().getCKeyword_1_0_2()), new TokenAlias(false, false, grammarAccess.getCallOrJumpAccess().getNcKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getCallOrJumpAccess().getNzKeyword_1_0_1()), new TokenAlias(false, false, grammarAccess.getCallOrJumpAccess().getZKeyword_1_0_3())), new TokenAlias(false, false, grammarAccess.getCallOrJumpAccess().getCommaKeyword_1_1()));
		match_Instruction_WSTerminalRuleCall_0_q = new TokenAlias(false, true, grammarAccess.getInstructionAccess().getWSTerminalRuleCall_0());
		match_LabelOrConstant_ColonKeyword_1_0_1_q = new TokenAlias(false, true, grammarAccess.getLabelOrConstantAccess().getColonKeyword_1_0_1());
		match_LabelOrConstant___ColonKeyword_1_0_0_ColonKeyword_1_0_1_q___or_____EQUKeyword_1_1_0_1_or_EquKeyword_1_1_0_0___ExprParserRuleCall_1_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLabelOrConstantAccess().getEQUKeyword_1_1_0_1()), new TokenAlias(false, false, grammarAccess.getLabelOrConstantAccess().getEquKeyword_1_1_0_0())), new TokenAlias(false, false, grammarAccess.getLabelOrConstantAccess().getExprParserRuleCall_1_1_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getLabelOrConstantAccess().getColonKeyword_1_0_0()), new TokenAlias(false, true, grammarAccess.getLabelOrConstantAccess().getColonKeyword_1_0_1())));
		match_LabelReference_____HyphenMinusKeyword_1_0_1_or_PlusSignKeyword_1_0_0___INTTerminalRuleCall_1_1__q = new GroupAlias(false, true, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLabelReferenceAccess().getHyphenMinusKeyword_1_0_1()), new TokenAlias(false, false, grammarAccess.getLabelReferenceAccess().getPlusSignKeyword_1_0_0())), new TokenAlias(false, false, grammarAccess.getLabelReferenceAccess().getINTTerminalRuleCall_1_1()));
		match_Ld_LeftSquareBracketKeyword_1_6_0_or___AKeyword_1_5_0_CommaKeyword_1_5_1_LeftSquareBracketKeyword_1_5_2___or___Register16ParserRuleCall_1_4_0_CommaKeyword_1_4_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getLdAccess().getAKeyword_1_5_0()), new TokenAlias(false, false, grammarAccess.getLdAccess().getCommaKeyword_1_5_1()), new TokenAlias(false, false, grammarAccess.getLdAccess().getLeftSquareBracketKeyword_1_5_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getLdAccess().getRegister16ParserRuleCall_1_4_0()), new TokenAlias(false, false, grammarAccess.getLdAccess().getCommaKeyword_1_4_1())), new TokenAlias(false, false, grammarAccess.getLdAccess().getLeftSquareBracketKeyword_1_6_0()));
		match_Ld___Register16ParserRuleCall_1_3_0_CommaKeyword_1_3_1_INTTerminalRuleCall_1_3_2___or___Register8ParserRuleCall_1_0_0_CommaKeyword_1_0_1_Register8ParserRuleCall_1_0_2___or___Register8ParserRuleCall_1_1_0_CommaKeyword_1_1_1_INTTerminalRuleCall_1_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getLdAccess().getRegister16ParserRuleCall_1_3_0()), new TokenAlias(false, false, grammarAccess.getLdAccess().getCommaKeyword_1_3_1()), new TokenAlias(false, false, grammarAccess.getLdAccess().getINTTerminalRuleCall_1_3_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getLdAccess().getRegister8ParserRuleCall_1_0_0()), new TokenAlias(false, false, grammarAccess.getLdAccess().getCommaKeyword_1_0_1()), new TokenAlias(false, false, grammarAccess.getLdAccess().getRegister8ParserRuleCall_1_0_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getLdAccess().getRegister8ParserRuleCall_1_1_0()), new TokenAlias(false, false, grammarAccess.getLdAccess().getCommaKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getLdAccess().getINTTerminalRuleCall_1_1_2())));
		match_LocalLabel_ColonKeyword_2_q = new TokenAlias(false, true, grammarAccess.getLocalLabelAccess().getColonKeyword_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getAddHlRule())
			return getAddHlToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBitOpsRule())
			return getBitOpsToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getExprRule())
			return getExprToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIncDecRule())
			return getIncDecToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLdHl1Rule())
			return getLdHl1Token(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPushPopRule())
			return getPushPopToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRegister16Rule())
			return getRegister16Token(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRegister8Rule())
			return getRegister8Token(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getReptRule())
			return getReptToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRetRule())
			return getRetToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRotateARule())
			return getRotateAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSwapRule())
			return getSwapToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWSRule())
			return getWSToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * AddHl:
	 * 	'add' 'hl' ',' Register16
	 * ;
	 */
	protected String getAddHlToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "add hl , af";
	}
	
	/**
	 * BitOps:
	 * 	('bit' | 'res' | 'set') INT ',' (Register8 | '[' 'hl' ']')
	 * ;
	 */
	protected String getBitOpsToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "bit , a";
	}
	
	/**
	 * Expr:
	 * 	STRING | INT
	 * ;
	 */
	protected String getExprToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	/**
	 * @Override
	 * terminal INT returns ecore::EInt:
	 * 	('0'..'9')+|'$'('0'..'9'|'a'..'f')+|'%'('0'|'1')+
	 * ;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * IncDec:
	 * 	('inc'|'dec')
	 * 	(Register8 | Register16 |'[' 'hl' ']')
	 * ;
	 */
	protected String getIncDecToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "inc a";
	}
	
	/**
	 * LdHl1:
	 * 	'ld' ('i'|'d') (
	 * 		'[' 'hl' ']' ',' 'a' |
	 * 		'a' ',' '[' 'hl' ']'
	 * 	)
	 * ;
	 */
	protected String getLdHl1Token(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "ld i [ hl ] , a";
	}
	
	/**
	 * PushPop:
	 * 	('push'|'pop') Register16
	 * ;
	 */
	protected String getPushPopToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "push af";
	}
	
	/**
	 * Register16:
	 * 	('af'|'bc'|'de'|'hl')
	 * ;
	 */
	protected String getRegister16Token(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "af";
	}
	
	/**
	 * Register8:
	 * 	('a'|'b'|'c'|'d'|'e'|'h'|'l')
	 * ;
	 */
	protected String getRegister8Token(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "a";
	}
	
	/**
	 * Rept:
	 * 	'rept' INT | 'endr'
	 * ;
	 */
	protected String getReptToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "rept";
	}
	
	/**
	 * Ret:
	 * 	'ret' ('nc'|'nz'|'c'|'z')?
	 * ;
	 */
	protected String getRetToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "ret";
	}
	
	/**
	 * RotateA:
	 * 	'rla' | 'rlca' | 'rra' | 'rrca'
	 * ;
	 */
	protected String getRotateAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "rla";
	}
	
	/**
	 * Swap:
	 * 	'swap' (Register8 | '[' 'hl' ']')
	 * ;
	 */
	protected String getSwapToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "swap a";
	}
	
	/**
	 * terminal WS         : (' '|'\t'|'\r'|'\n')+;
	 */
	protected String getWSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return " ";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AndCp_AndKeyword_0_0_or_CpKeyword_0_1.equals(syntax))
				emit_AndCp_AndKeyword_0_0_or_CpKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AndCp_INTTerminalRuleCall_2_2_or_Register8ParserRuleCall_2_0.equals(syntax))
				emit_AndCp_INTTerminalRuleCall_2_2_or_Register8ParserRuleCall_2_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AndCp_Instruction_Ld_AddHlParserRuleCall_1_11_or_BitOpsParserRuleCall_1_9_or_IncDecParserRuleCall_1_6_or_LdHl1ParserRuleCall_1_1_or_PushPopParserRuleCall_1_3_or_ReptParserRuleCall_1_7_or_RetParserRuleCall_1_4_or_RotateAParserRuleCall_1_8_or_SwapParserRuleCall_1_10_or___LdKeyword_0_____Register16ParserRuleCall_1_3_0_CommaKeyword_1_3_1_INTTerminalRuleCall_1_3_2___or___Register8ParserRuleCall_1_0_0_CommaKeyword_1_0_1_Register8ParserRuleCall_1_0_2___or___Register8ParserRuleCall_1_1_0_CommaKeyword_1_1_1_INTTerminalRuleCall_1_1_2_______or_____AndKeyword_0_0_or_CpKeyword_0_1_____AKeyword_1_0_CommaKeyword_1_1__q___INTTerminalRuleCall_2_2_or_Register8ParserRuleCall_2_0____.equals(syntax))
				emit_AndCp_Instruction_Ld_AddHlParserRuleCall_1_11_or_BitOpsParserRuleCall_1_9_or_IncDecParserRuleCall_1_6_or_LdHl1ParserRuleCall_1_1_or_PushPopParserRuleCall_1_3_or_ReptParserRuleCall_1_7_or_RetParserRuleCall_1_4_or_RotateAParserRuleCall_1_8_or_SwapParserRuleCall_1_10_or___LdKeyword_0_____Register16ParserRuleCall_1_3_0_CommaKeyword_1_3_1_INTTerminalRuleCall_1_3_2___or___Register8ParserRuleCall_1_0_0_CommaKeyword_1_0_1_Register8ParserRuleCall_1_0_2___or___Register8ParserRuleCall_1_1_0_CommaKeyword_1_1_1_INTTerminalRuleCall_1_1_2_______or_____AndKeyword_0_0_or_CpKeyword_0_1_____AKeyword_1_0_CommaKeyword_1_1__q___INTTerminalRuleCall_2_2_or_Register8ParserRuleCall_2_0____(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AndCp___AKeyword_1_0_CommaKeyword_1_1__q.equals(syntax))
				emit_AndCp___AKeyword_1_0_CommaKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CallOrJump_CallKeyword_0_0_or_JpKeyword_0_2_or_JrKeyword_0_1.equals(syntax))
				emit_CallOrJump_CallKeyword_0_0_or_JpKeyword_0_2_or_JrKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CallOrJump_____CKeyword_1_0_2_or_NcKeyword_1_0_0_or_NzKeyword_1_0_1_or_ZKeyword_1_0_3___CommaKeyword_1_1__q.equals(syntax))
				emit_CallOrJump_____CKeyword_1_0_2_or_NcKeyword_1_0_0_or_NzKeyword_1_0_1_or_ZKeyword_1_0_3___CommaKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Instruction_WSTerminalRuleCall_0_q.equals(syntax))
				emit_Instruction_WSTerminalRuleCall_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LabelOrConstant_ColonKeyword_1_0_1_q.equals(syntax))
				emit_LabelOrConstant_ColonKeyword_1_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LabelOrConstant___ColonKeyword_1_0_0_ColonKeyword_1_0_1_q___or_____EQUKeyword_1_1_0_1_or_EquKeyword_1_1_0_0___ExprParserRuleCall_1_1_1__.equals(syntax))
				emit_LabelOrConstant___ColonKeyword_1_0_0_ColonKeyword_1_0_1_q___or_____EQUKeyword_1_1_0_1_or_EquKeyword_1_1_0_0___ExprParserRuleCall_1_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LabelReference_____HyphenMinusKeyword_1_0_1_or_PlusSignKeyword_1_0_0___INTTerminalRuleCall_1_1__q.equals(syntax))
				emit_LabelReference_____HyphenMinusKeyword_1_0_1_or_PlusSignKeyword_1_0_0___INTTerminalRuleCall_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Ld_LeftSquareBracketKeyword_1_6_0_or___AKeyword_1_5_0_CommaKeyword_1_5_1_LeftSquareBracketKeyword_1_5_2___or___Register16ParserRuleCall_1_4_0_CommaKeyword_1_4_1__.equals(syntax))
				emit_Ld_LeftSquareBracketKeyword_1_6_0_or___AKeyword_1_5_0_CommaKeyword_1_5_1_LeftSquareBracketKeyword_1_5_2___or___Register16ParserRuleCall_1_4_0_CommaKeyword_1_4_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Ld___Register16ParserRuleCall_1_3_0_CommaKeyword_1_3_1_INTTerminalRuleCall_1_3_2___or___Register8ParserRuleCall_1_0_0_CommaKeyword_1_0_1_Register8ParserRuleCall_1_0_2___or___Register8ParserRuleCall_1_1_0_CommaKeyword_1_1_1_INTTerminalRuleCall_1_1_2__.equals(syntax))
				emit_Ld___Register16ParserRuleCall_1_3_0_CommaKeyword_1_3_1_INTTerminalRuleCall_1_3_2___or___Register8ParserRuleCall_1_0_0_CommaKeyword_1_0_1_Register8ParserRuleCall_1_0_2___or___Register8ParserRuleCall_1_1_0_CommaKeyword_1_1_1_INTTerminalRuleCall_1_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LocalLabel_ColonKeyword_2_q.equals(syntax))
				emit_LocalLabel_ColonKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'and' | 'cp'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ('a' ',')? (Register8 | INT) (rule start)
	 *     (rule start) (ambiguity) ('a' ',')? andCpLabelRef=[LabelOrConstant|ID]
	 *     (rule start) WS? (ambiguity) ('a' ',')? andCpLabelRef=[LabelOrConstant|ID]
	 
	 * </pre>
	 */
	protected void emit_AndCp_AndKeyword_0_0_or_CpKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     Register8 | INT
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('and' | 'cp') ('a' ',')? (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_AndCp_INTTerminalRuleCall_2_2_or_Register8ParserRuleCall_2_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         LdHl1 | 
	  *         PushPop | 
	  *         Ret | 
	  *         IncDec | 
	  *         Rept | 
	  *         RotateA | 
	  *         BitOps | 
	  *         Swap | 
	  *         AddHl | 
	  *         ('ld' ((Register8 ',' Register8) | (Register8 ',' INT) | (Register16 ',' INT))) | 
	  *         (('and' | 'cp') ('a' ',')? (Register8 | INT))
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) WS? (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_AndCp_Instruction_Ld_AddHlParserRuleCall_1_11_or_BitOpsParserRuleCall_1_9_or_IncDecParserRuleCall_1_6_or_LdHl1ParserRuleCall_1_1_or_PushPopParserRuleCall_1_3_or_ReptParserRuleCall_1_7_or_RetParserRuleCall_1_4_or_RotateAParserRuleCall_1_8_or_SwapParserRuleCall_1_10_or___LdKeyword_0_____Register16ParserRuleCall_1_3_0_CommaKeyword_1_3_1_INTTerminalRuleCall_1_3_2___or___Register8ParserRuleCall_1_0_0_CommaKeyword_1_0_1_Register8ParserRuleCall_1_0_2___or___Register8ParserRuleCall_1_1_0_CommaKeyword_1_1_1_INTTerminalRuleCall_1_1_2_______or_____AndKeyword_0_0_or_CpKeyword_0_1_____AKeyword_1_0_CommaKeyword_1_1__q___INTTerminalRuleCall_2_2_or_Register8ParserRuleCall_2_0____(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('a' ',')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('and' | 'cp') (ambiguity) (Register8 | INT) (rule start)
	 *     (rule start) ('and' | 'cp') (ambiguity) andCpLabelRef=[LabelOrConstant|ID]
	 *     (rule start) WS? ('and' | 'cp') (ambiguity) andCpLabelRef=[LabelOrConstant|ID]
	 
	 * </pre>
	 */
	protected void emit_AndCp___AKeyword_1_0_CommaKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'call' | 'jr' | 'jp'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (('nc' | 'nz' | 'c' | 'z') ',')? '.' locLabel=[LocalLabel|ID]
	 *     (rule start) (ambiguity) (('nc' | 'nz' | 'c' | 'z') ',')? absLabel=[LabelOrConstant|ID]
	 *     (rule start) WS? (ambiguity) (('nc' | 'nz' | 'c' | 'z') ',')? '.' locLabel=[LocalLabel|ID]
	 *     (rule start) WS? (ambiguity) (('nc' | 'nz' | 'c' | 'z') ',')? absLabel=[LabelOrConstant|ID]
	 
	 * </pre>
	 */
	protected void emit_CallOrJump_CallKeyword_0_0_or_JpKeyword_0_2_or_JrKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (('nc' | 'nz' | 'c' | 'z') ',')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('call' | 'jr' | 'jp') (ambiguity) '.' locLabel=[LocalLabel|ID]
	 *     (rule start) ('call' | 'jr' | 'jp') (ambiguity) absLabel=[LabelOrConstant|ID]
	 *     (rule start) WS? ('call' | 'jr' | 'jp') (ambiguity) '.' locLabel=[LocalLabel|ID]
	 *     (rule start) WS? ('call' | 'jr' | 'jp') (ambiguity) absLabel=[LabelOrConstant|ID]
	 
	 * </pre>
	 */
	protected void emit_CallOrJump_____CKeyword_1_0_2_or_NcKeyword_1_0_0_or_NzKeyword_1_0_1_or_ZKeyword_1_0_3___CommaKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         (rule start) 
	 *         (ambiguity) 
	 *         (LdHl1 | PushPop | Ret | IncDec | Rept | RotateA | BitOps | Swap | AddHl | ('ld' ((Register8 ',' Register8) | (Register8 ',' INT) | (Register16 ',' INT))) | (('and' | 'cp') ('a' ',')? (Register8 | INT))) 
	 *         (rule start)
	 *     )
	 *     (rule start) (ambiguity) 'ld' ((Register16 ',') | ('a' ',' '[') | '[') refLabel=[LabelOrConstant|ID]
	 *     (rule start) (ambiguity) 'ld' Register16 ',' '.' locLabel=[LocalLabel|ID]
	 *     (rule start) (ambiguity) 'ld' Register8 ',' 'BANK' '(' bankLabel=[LabelOrConstant|ID]
	 *     (rule start) (ambiguity) ('and' | 'cp') ('a' ',')? andCpLabelRef=[LabelOrConstant|ID]
	 *     (rule start) (ambiguity) ('call' | 'jr' | 'jp') (('nc' | 'nz' | 'c' | 'z') ',')? '.' locLabel=[LocalLabel|ID]
	 *     (rule start) (ambiguity) ('call' | 'jr' | 'jp') (('nc' | 'nz' | 'c' | 'z') ',')? absLabel=[LabelOrConstant|ID]
	 
	 * </pre>
	 */
	protected void emit_Instruction_WSTerminalRuleCall_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ':'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID ':' (ambiguity) statements+=Statement
	 
	 * </pre>
	 */
	protected void emit_LabelOrConstant_ColonKeyword_1_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (':' ':'?) | (('equ' | 'EQU') Expr)
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_LabelOrConstant___ColonKeyword_1_0_0_ColonKeyword_1_0_1_q___or_____EQUKeyword_1_1_0_1_or_EquKeyword_1_1_0_0___ExprParserRuleCall_1_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (('+' | '-') INT)?
	 *
	 * This ambiguous syntax occurs at:
	 *     refLabel=[LabelOrConstant|ID] (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_LabelReference_____HyphenMinusKeyword_1_0_1_or_PlusSignKeyword_1_0_0___INTTerminalRuleCall_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (Register16 ',') | ('a' ',' '[') | '['
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'ld' (ambiguity) refLabel=[LabelOrConstant|ID]
	 *     (rule start) WS? 'ld' (ambiguity) refLabel=[LabelOrConstant|ID]
	 
	 * </pre>
	 */
	protected void emit_Ld_LeftSquareBracketKeyword_1_6_0_or___AKeyword_1_5_0_CommaKeyword_1_5_1_LeftSquareBracketKeyword_1_5_2___or___Register16ParserRuleCall_1_4_0_CommaKeyword_1_4_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (Register8 ',' Register8) | (Register8 ',' INT) | (Register16 ',' INT)
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'ld' (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_Ld___Register16ParserRuleCall_1_3_0_CommaKeyword_1_3_1_INTTerminalRuleCall_1_3_2___or___Register8ParserRuleCall_1_0_0_CommaKeyword_1_0_1_Register8ParserRuleCall_1_0_2___or___Register8ParserRuleCall_1_1_0_CommaKeyword_1_1_1_INTTerminalRuleCall_1_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ':'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_LocalLabel_ColonKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
