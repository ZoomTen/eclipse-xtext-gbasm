/*
 * generated by Xtext 2.26.0
 */
grammar InternalGbasm;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.zumi.xtext.gbasm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.zumi.xtext.gbasm.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.zumi.xtext.gbasm.services.GbasmGrammarAccess;

}

@parser::members {

 	private GbasmGrammarAccess grammarAccess;

    public InternalGbasmParser(TokenStream input, GbasmGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Asm";
   	}

   	@Override
   	protected GbasmGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAsm
entryRuleAsm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAsmRule()); }
	iv_ruleAsm=ruleAsm
	{ $current=$iv_ruleAsm.current; }
	EOF;

// Rule Asm
ruleAsm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAsmAccess().getLabelsLabelOrConstantParserRuleCall_0());
			}
			lv_labels_0_0=ruleLabelOrConstant
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getAsmRule());
				}
				add(
					$current,
					"labels",
					lv_labels_0_0,
					"org.zumi.xtext.gbasm.Gbasm.LabelOrConstant");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleRegister8
entryRuleRegister8 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRegister8Rule()); }
	iv_ruleRegister8=ruleRegister8
	{ $current=$iv_ruleRegister8.current.getText(); }
	EOF;

// Rule Register8
ruleRegister8 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='a'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRegister8Access().getAKeyword_0());
		}
		    |
		kw='b'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRegister8Access().getBKeyword_1());
		}
		    |
		kw='c'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRegister8Access().getCKeyword_2());
		}
		    |
		kw='d'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRegister8Access().getDKeyword_3());
		}
		    |
		kw='e'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRegister8Access().getEKeyword_4());
		}
		    |
		kw='h'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRegister8Access().getHKeyword_5());
		}
		    |
		kw='l'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRegister8Access().getLKeyword_6());
		}
	)
;

// Entry rule entryRuleRegister16
entryRuleRegister16 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRegister16Rule()); }
	iv_ruleRegister16=ruleRegister16
	{ $current=$iv_ruleRegister16.current.getText(); }
	EOF;

// Rule Register16
ruleRegister16 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='af'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRegister16Access().getAfKeyword_0());
		}
		    |
		kw='bc'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRegister16Access().getBcKeyword_1());
		}
		    |
		kw='de'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRegister16Access().getDeKeyword_2());
		}
		    |
		kw='hl'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRegister16Access().getHlKeyword_3());
		}
	)
;

// Entry rule entryRuleLabelOrConstant
entryRuleLabelOrConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabelOrConstantRule()); }
	iv_ruleLabelOrConstant=ruleLabelOrConstant
	{ $current=$iv_ruleLabelOrConstant.current; }
	EOF;

// Rule LabelOrConstant
ruleLabelOrConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getLabelOrConstantAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLabelOrConstantRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getLabelOrConstantAccess().getColonKeyword_1_0_0());
				}
				(
					otherlv_2=':'
					{
						newLeafNode(otherlv_2, grammarAccess.getLabelOrConstantAccess().getColonKeyword_1_0_1());
					}
				)?
				(
					(
						{
							newCompositeNode(grammarAccess.getLabelOrConstantAccess().getStatementsStatementParserRuleCall_1_0_2_0());
						}
						lv_statements_3_0=ruleStatement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLabelOrConstantRule());
							}
							add(
								$current,
								"statements",
								lv_statements_3_0,
								"org.zumi.xtext.gbasm.Gbasm.Statement");
							afterParserOrEnumRuleCall();
						}
					)
				)*
			)
			    |
			(
				(
					otherlv_4='equ'
					{
						newLeafNode(otherlv_4, grammarAccess.getLabelOrConstantAccess().getEquKeyword_1_1_0_0());
					}
					    |
					otherlv_5='EQU'
					{
						newLeafNode(otherlv_5, grammarAccess.getLabelOrConstantAccess().getEQUKeyword_1_1_0_1());
					}
				)
				{
					newCompositeNode(grammarAccess.getLabelOrConstantAccess().getExprParserRuleCall_1_1_1());
				}
				ruleExpr
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getLocalLabelParserRuleCall_0());
		}
		this_LocalLabel_0=ruleLocalLabel
		{
			$current = $this_LocalLabel_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getInstructionParserRuleCall_1());
		}
		this_Instruction_1=ruleInstruction
		{
			$current = $this_Instruction_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLocalLabel
entryRuleLocalLabel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocalLabelRule()); }
	iv_ruleLocalLabel=ruleLocalLabel
	{ $current=$iv_ruleLocalLabel.current; }
	EOF;

// Rule LocalLabel
ruleLocalLabel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='.'
		{
			newLeafNode(otherlv_0, grammarAccess.getLocalLabelAccess().getFullStopKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLocalLabelAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLocalLabelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getLocalLabelAccess().getColonKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	iv_ruleInstruction=ruleInstruction
	{ $current=$iv_ruleInstruction.current; }
	EOF;

// Rule Instruction
ruleInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_WS_0=RULE_WS
			{
				newLeafNode(this_WS_0, grammarAccess.getInstructionAccess().getWSTerminalRuleCall_0());
			}
		)?
		(
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getLdParserRuleCall_1_0());
			}
			this_Ld_1=ruleLd
			{
				$current = $this_Ld_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getLdHl1ParserRuleCall_1_1());
			}
			ruleLdHl1
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getCallOrJumpParserRuleCall_1_2());
			}
			this_CallOrJump_3=ruleCallOrJump
			{
				$current = $this_CallOrJump_3.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getPushPopParserRuleCall_1_3());
			}
			rulePushPop
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getRetParserRuleCall_1_4());
			}
			ruleRet
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getAndCpParserRuleCall_1_5());
			}
			this_AndCp_6=ruleAndCp
			{
				$current = $this_AndCp_6.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getIncDecParserRuleCall_1_6());
			}
			ruleIncDec
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getReptParserRuleCall_1_7());
			}
			ruleRept
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getRotateAParserRuleCall_1_8());
			}
			ruleRotateA
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getBitOpsParserRuleCall_1_9());
			}
			ruleBitOps
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getSwapParserRuleCall_1_10());
			}
			ruleSwap
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInstructionAccess().getAddHlParserRuleCall_1_11());
			}
			ruleAddHl
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleRept
entryRuleRept returns [String current=null]:
	{ newCompositeNode(grammarAccess.getReptRule()); }
	iv_ruleRept=ruleRept
	{ $current=$iv_ruleRept.current.getText(); }
	EOF;

// Rule Rept
ruleRept returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='rept'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getReptAccess().getReptKeyword_0_0());
			}
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getReptAccess().getINTTerminalRuleCall_0_1());
			}
		)
		    |
		kw='endr'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getReptAccess().getEndrKeyword_1());
		}
	)
;

// Entry rule entryRuleRotateA
entryRuleRotateA returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRotateARule()); }
	iv_ruleRotateA=ruleRotateA
	{ $current=$iv_ruleRotateA.current.getText(); }
	EOF;

// Rule RotateA
ruleRotateA returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='rla'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRotateAAccess().getRlaKeyword_0());
		}
		    |
		kw='rlca'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRotateAAccess().getRlcaKeyword_1());
		}
		    |
		kw='rra'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRotateAAccess().getRraKeyword_2());
		}
		    |
		kw='rrca'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRotateAAccess().getRrcaKeyword_3());
		}
	)
;

// Entry rule entryRuleBitOps
entryRuleBitOps returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBitOpsRule()); }
	iv_ruleBitOps=ruleBitOps
	{ $current=$iv_ruleBitOps.current.getText(); }
	EOF;

// Rule BitOps
ruleBitOps returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='bit'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getBitOpsAccess().getBitKeyword_0_0());
			}
			    |
			kw='res'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getBitOpsAccess().getResKeyword_0_1());
			}
			    |
			kw='set'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getBitOpsAccess().getSetKeyword_0_2());
			}
		)
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getBitOpsAccess().getINTTerminalRuleCall_1());
		}
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBitOpsAccess().getCommaKeyword_2());
		}
		(
			{
				newCompositeNode(grammarAccess.getBitOpsAccess().getRegister8ParserRuleCall_3_0());
			}
			this_Register8_5=ruleRegister8
			{
				$current.merge(this_Register8_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				kw='['
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getBitOpsAccess().getLeftSquareBracketKeyword_3_1_0());
				}
				kw='hl'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getBitOpsAccess().getHlKeyword_3_1_1());
				}
				kw=']'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getBitOpsAccess().getRightSquareBracketKeyword_3_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleAddHl
entryRuleAddHl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAddHlRule()); }
	iv_ruleAddHl=ruleAddHl
	{ $current=$iv_ruleAddHl.current.getText(); }
	EOF;

// Rule AddHl
ruleAddHl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='add'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAddHlAccess().getAddKeyword_0());
		}
		kw='hl'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAddHlAccess().getHlKeyword_1());
		}
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAddHlAccess().getCommaKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getAddHlAccess().getRegister16ParserRuleCall_3());
		}
		this_Register16_3=ruleRegister16
		{
			$current.merge(this_Register16_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSwap
entryRuleSwap returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSwapRule()); }
	iv_ruleSwap=ruleSwap
	{ $current=$iv_ruleSwap.current.getText(); }
	EOF;

// Rule Swap
ruleSwap returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='swap'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSwapAccess().getSwapKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getSwapAccess().getRegister8ParserRuleCall_1_0());
			}
			this_Register8_1=ruleRegister8
			{
				$current.merge(this_Register8_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				kw='['
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getSwapAccess().getLeftSquareBracketKeyword_1_1_0());
				}
				kw='hl'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getSwapAccess().getHlKeyword_1_1_1());
				}
				kw=']'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getSwapAccess().getRightSquareBracketKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleIncDec
entryRuleIncDec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIncDecRule()); }
	iv_ruleIncDec=ruleIncDec
	{ $current=$iv_ruleIncDec.current.getText(); }
	EOF;

// Rule IncDec
ruleIncDec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='inc'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIncDecAccess().getIncKeyword_0_0());
			}
			    |
			kw='dec'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIncDecAccess().getDecKeyword_0_1());
			}
		)
		(
			{
				newCompositeNode(grammarAccess.getIncDecAccess().getRegister8ParserRuleCall_1_0());
			}
			this_Register8_2=ruleRegister8
			{
				$current.merge(this_Register8_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getIncDecAccess().getRegister16ParserRuleCall_1_1());
			}
			this_Register16_3=ruleRegister16
			{
				$current.merge(this_Register16_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				kw='['
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getIncDecAccess().getLeftSquareBracketKeyword_1_2_0());
				}
				kw='hl'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getIncDecAccess().getHlKeyword_1_2_1());
				}
				kw=']'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getIncDecAccess().getRightSquareBracketKeyword_1_2_2());
				}
			)
		)
	)
;

// Entry rule entryRuleLd
entryRuleLd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLdRule()); }
	iv_ruleLd=ruleLd
	{ $current=$iv_ruleLd.current; }
	EOF;

// Rule Ld
ruleLd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ld'
		{
			newLeafNode(otherlv_0, grammarAccess.getLdAccess().getLdKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLdAccess().getRegister8ParserRuleCall_1_0_0());
				}
				ruleRegister8
				{
					afterParserOrEnumRuleCall();
				}
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getLdAccess().getCommaKeyword_1_0_1());
				}
				{
					newCompositeNode(grammarAccess.getLdAccess().getRegister8ParserRuleCall_1_0_2());
				}
				ruleRegister8
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			(
				{
					newCompositeNode(grammarAccess.getLdAccess().getRegister8ParserRuleCall_1_1_0());
				}
				ruleRegister8
				{
					afterParserOrEnumRuleCall();
				}
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getLdAccess().getCommaKeyword_1_1_1());
				}
				this_INT_6=RULE_INT
				{
					newLeafNode(this_INT_6, grammarAccess.getLdAccess().getINTTerminalRuleCall_1_1_2());
				}
			)
			    |
			(
				{
					newCompositeNode(grammarAccess.getLdAccess().getRegister8ParserRuleCall_1_2_0());
				}
				ruleRegister8
				{
					afterParserOrEnumRuleCall();
				}
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getLdAccess().getCommaKeyword_1_2_1());
				}
				{
					newCompositeNode(grammarAccess.getLdAccess().getBankReferenceParserRuleCall_1_2_2());
				}
				this_BankReference_9=ruleBankReference
				{
					$current = $this_BankReference_9.current;
					afterParserOrEnumRuleCall();
				}
			)
			    |
			(
				{
					newCompositeNode(grammarAccess.getLdAccess().getRegister16ParserRuleCall_1_3_0());
				}
				ruleRegister16
				{
					afterParserOrEnumRuleCall();
				}
				otherlv_11=','
				{
					newLeafNode(otherlv_11, grammarAccess.getLdAccess().getCommaKeyword_1_3_1());
				}
				this_INT_12=RULE_INT
				{
					newLeafNode(this_INT_12, grammarAccess.getLdAccess().getINTTerminalRuleCall_1_3_2());
				}
			)
			    |
			(
				{
					newCompositeNode(grammarAccess.getLdAccess().getRegister16ParserRuleCall_1_4_0());
				}
				ruleRegister16
				{
					afterParserOrEnumRuleCall();
				}
				otherlv_14=','
				{
					newLeafNode(otherlv_14, grammarAccess.getLdAccess().getCommaKeyword_1_4_1());
				}
				(
					{
						newCompositeNode(grammarAccess.getLdAccess().getLabelReferenceParserRuleCall_1_4_2_0());
					}
					this_LabelReference_15=ruleLabelReference
					{
						$current = $this_LabelReference_15.current;
						afterParserOrEnumRuleCall();
					}
					    |
					(
						otherlv_16='.'
						{
							newLeafNode(otherlv_16, grammarAccess.getLdAccess().getFullStopKeyword_1_4_2_1_0());
						}
						(
							(
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getLdRule());
									}
								}
								otherlv_17=RULE_ID
								{
									newLeafNode(otherlv_17, grammarAccess.getLdAccess().getLocLabelLocalLabelCrossReference_1_4_2_1_1_0());
								}
							)
						)
					)
				)
			)
			    |
			(
				otherlv_18='a'
				{
					newLeafNode(otherlv_18, grammarAccess.getLdAccess().getAKeyword_1_5_0());
				}
				otherlv_19=','
				{
					newLeafNode(otherlv_19, grammarAccess.getLdAccess().getCommaKeyword_1_5_1());
				}
				otherlv_20='['
				{
					newLeafNode(otherlv_20, grammarAccess.getLdAccess().getLeftSquareBracketKeyword_1_5_2());
				}
				{
					newCompositeNode(grammarAccess.getLdAccess().getLabelReferenceParserRuleCall_1_5_3());
				}
				this_LabelReference_21=ruleLabelReference
				{
					$current = $this_LabelReference_21.current;
					afterParserOrEnumRuleCall();
				}
				otherlv_22=']'
				{
					newLeafNode(otherlv_22, grammarAccess.getLdAccess().getRightSquareBracketKeyword_1_5_4());
				}
			)
			    |
			(
				otherlv_23='['
				{
					newLeafNode(otherlv_23, grammarAccess.getLdAccess().getLeftSquareBracketKeyword_1_6_0());
				}
				{
					newCompositeNode(grammarAccess.getLdAccess().getLabelReferenceParserRuleCall_1_6_1());
				}
				this_LabelReference_24=ruleLabelReference
				{
					$current = $this_LabelReference_24.current;
					afterParserOrEnumRuleCall();
				}
				otherlv_25=']'
				{
					newLeafNode(otherlv_25, grammarAccess.getLdAccess().getRightSquareBracketKeyword_1_6_2());
				}
				otherlv_26=','
				{
					newLeafNode(otherlv_26, grammarAccess.getLdAccess().getCommaKeyword_1_6_3());
				}
				otherlv_27='a'
				{
					newLeafNode(otherlv_27, grammarAccess.getLdAccess().getAKeyword_1_6_4());
				}
			)
		)
	)
;

// Entry rule entryRuleLdHl1
entryRuleLdHl1 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLdHl1Rule()); }
	iv_ruleLdHl1=ruleLdHl1
	{ $current=$iv_ruleLdHl1.current.getText(); }
	EOF;

// Rule LdHl1
ruleLdHl1 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='ld'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLdHl1Access().getLdKeyword_0());
		}
		(
			kw='i'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLdHl1Access().getIKeyword_1_0());
			}
			    |
			kw='d'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLdHl1Access().getDKeyword_1_1());
			}
		)
		(
			(
				kw='['
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getLdHl1Access().getLeftSquareBracketKeyword_2_0_0());
				}
				kw='hl'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getLdHl1Access().getHlKeyword_2_0_1());
				}
				kw=']'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getLdHl1Access().getRightSquareBracketKeyword_2_0_2());
				}
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getLdHl1Access().getCommaKeyword_2_0_3());
				}
				kw='a'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getLdHl1Access().getAKeyword_2_0_4());
				}
			)
			    |
			(
				kw='a'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getLdHl1Access().getAKeyword_2_1_0());
				}
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getLdHl1Access().getCommaKeyword_2_1_1());
				}
				kw='['
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getLdHl1Access().getLeftSquareBracketKeyword_2_1_2());
				}
				kw='hl'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getLdHl1Access().getHlKeyword_2_1_3());
				}
				kw=']'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getLdHl1Access().getRightSquareBracketKeyword_2_1_4());
				}
			)
		)
	)
;

// Entry rule entryRuleExpr
entryRuleExpr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	iv_ruleExpr=ruleExpr
	{ $current=$iv_ruleExpr.current.getText(); }
	EOF;

// Rule Expr
ruleExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getExprAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getExprAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleLabelReference
entryRuleLabelReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabelReferenceRule()); }
	iv_ruleLabelReference=ruleLabelReference
	{ $current=$iv_ruleLabelReference.current; }
	EOF;

// Rule LabelReference
ruleLabelReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLabelReferenceRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getLabelReferenceAccess().getRefLabelLabelOrConstantCrossReference_0_0());
				}
			)
		)
		(
			(
				otherlv_1='+'
				{
					newLeafNode(otherlv_1, grammarAccess.getLabelReferenceAccess().getPlusSignKeyword_1_0_0());
				}
				    |
				otherlv_2='-'
				{
					newLeafNode(otherlv_2, grammarAccess.getLabelReferenceAccess().getHyphenMinusKeyword_1_0_1());
				}
			)
			this_INT_3=RULE_INT
			{
				newLeafNode(this_INT_3, grammarAccess.getLabelReferenceAccess().getINTTerminalRuleCall_1_1());
			}
		)?
	)
;

// Entry rule entryRuleBankReference
entryRuleBankReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBankReferenceRule()); }
	iv_ruleBankReference=ruleBankReference
	{ $current=$iv_ruleBankReference.current; }
	EOF;

// Rule BankReference
ruleBankReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='BANK'
		{
			newLeafNode(otherlv_0, grammarAccess.getBankReferenceAccess().getBANKKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getBankReferenceAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBankReferenceRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getBankReferenceAccess().getBankLabelLabelOrConstantCrossReference_2_0());
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getBankReferenceAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulePushPop
entryRulePushPop returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPushPopRule()); }
	iv_rulePushPop=rulePushPop
	{ $current=$iv_rulePushPop.current.getText(); }
	EOF;

// Rule PushPop
rulePushPop returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='push'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPushPopAccess().getPushKeyword_0_0());
			}
			    |
			kw='pop'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPushPopAccess().getPopKeyword_0_1());
			}
		)
		{
			newCompositeNode(grammarAccess.getPushPopAccess().getRegister16ParserRuleCall_1());
		}
		this_Register16_2=ruleRegister16
		{
			$current.merge(this_Register16_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAndCp
entryRuleAndCp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndCpRule()); }
	iv_ruleAndCp=ruleAndCp
	{ $current=$iv_ruleAndCp.current; }
	EOF;

// Rule AndCp
ruleAndCp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='and'
			{
				newLeafNode(otherlv_0, grammarAccess.getAndCpAccess().getAndKeyword_0_0());
			}
			    |
			otherlv_1='cp'
			{
				newLeafNode(otherlv_1, grammarAccess.getAndCpAccess().getCpKeyword_0_1());
			}
		)
		(
			otherlv_2='a'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndCpAccess().getAKeyword_1_0());
			}
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getAndCpAccess().getCommaKeyword_1_1());
			}
		)?
		(
			{
				newCompositeNode(grammarAccess.getAndCpAccess().getRegister8ParserRuleCall_2_0());
			}
			ruleRegister8
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAndCpRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getAndCpAccess().getAndCpLabelRefLabelOrConstantCrossReference_2_1_0());
					}
				)
			)
			    |
			this_INT_6=RULE_INT
			{
				newLeafNode(this_INT_6, grammarAccess.getAndCpAccess().getINTTerminalRuleCall_2_2());
			}
		)
	)
;

// Entry rule entryRuleRet
entryRuleRet returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRetRule()); }
	iv_ruleRet=ruleRet
	{ $current=$iv_ruleRet.current.getText(); }
	EOF;

// Rule Ret
ruleRet returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='ret'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRetAccess().getRetKeyword_0());
		}
		(
			kw='nc'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRetAccess().getNcKeyword_1_0());
			}
			    |
			kw='nz'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRetAccess().getNzKeyword_1_1());
			}
			    |
			kw='c'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRetAccess().getCKeyword_1_2());
			}
			    |
			kw='z'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRetAccess().getZKeyword_1_3());
			}
		)?
	)
;

// Entry rule entryRuleCallOrJump
entryRuleCallOrJump returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCallOrJumpRule()); }
	iv_ruleCallOrJump=ruleCallOrJump
	{ $current=$iv_ruleCallOrJump.current; }
	EOF;

// Rule CallOrJump
ruleCallOrJump returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='call'
			{
				newLeafNode(otherlv_0, grammarAccess.getCallOrJumpAccess().getCallKeyword_0_0());
			}
			    |
			otherlv_1='jr'
			{
				newLeafNode(otherlv_1, grammarAccess.getCallOrJumpAccess().getJrKeyword_0_1());
			}
			    |
			otherlv_2='jp'
			{
				newLeafNode(otherlv_2, grammarAccess.getCallOrJumpAccess().getJpKeyword_0_2());
			}
		)
		(
			(
				otherlv_3='nc'
				{
					newLeafNode(otherlv_3, grammarAccess.getCallOrJumpAccess().getNcKeyword_1_0_0());
				}
				    |
				otherlv_4='nz'
				{
					newLeafNode(otherlv_4, grammarAccess.getCallOrJumpAccess().getNzKeyword_1_0_1());
				}
				    |
				otherlv_5='c'
				{
					newLeafNode(otherlv_5, grammarAccess.getCallOrJumpAccess().getCKeyword_1_0_2());
				}
				    |
				otherlv_6='z'
				{
					newLeafNode(otherlv_6, grammarAccess.getCallOrJumpAccess().getZKeyword_1_0_3());
				}
			)
			otherlv_7=','
			{
				newLeafNode(otherlv_7, grammarAccess.getCallOrJumpAccess().getCommaKeyword_1_1());
			}
		)?
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCallOrJumpRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getCallOrJumpAccess().getAbsLabelLabelOrConstantCrossReference_2_0_0());
					}
				)
			)
			    |
			(
				otherlv_9='.'
				{
					newLeafNode(otherlv_9, grammarAccess.getCallOrJumpAccess().getFullStopKeyword_2_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCallOrJumpRule());
							}
						}
						otherlv_10=RULE_ID
						{
							newLeafNode(otherlv_10, grammarAccess.getCallOrJumpAccess().getLocLabelLocalLabelCrossReference_2_1_1_0());
						}
					)
				)
			)
		)
	)
;

RULE_INT : (('0'..'9')+|'$' ('0'..'9'|'a'..'f')+|'%' ('0'|'1')+);

RULE_SL_COMMENT : ';' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
