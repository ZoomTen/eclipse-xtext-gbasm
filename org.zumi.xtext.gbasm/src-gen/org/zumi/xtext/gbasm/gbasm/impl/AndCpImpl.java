/**
 * generated by Xtext 2.26.0
 */
package org.zumi.xtext.gbasm.gbasm.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.zumi.xtext.gbasm.gbasm.AndCp;
import org.zumi.xtext.gbasm.gbasm.GbasmPackage;
import org.zumi.xtext.gbasm.gbasm.LabelOrConstant;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>And Cp</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.zumi.xtext.gbasm.gbasm.impl.AndCpImpl#getAndCpLabelRef <em>And Cp Label Ref</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AndCpImpl extends InstructionImpl implements AndCp
{
  /**
   * The cached value of the '{@link #getAndCpLabelRef() <em>And Cp Label Ref</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAndCpLabelRef()
   * @generated
   * @ordered
   */
  protected LabelOrConstant andCpLabelRef;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AndCpImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GbasmPackage.Literals.AND_CP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LabelOrConstant getAndCpLabelRef()
  {
    if (andCpLabelRef != null && andCpLabelRef.eIsProxy())
    {
      InternalEObject oldAndCpLabelRef = (InternalEObject)andCpLabelRef;
      andCpLabelRef = (LabelOrConstant)eResolveProxy(oldAndCpLabelRef);
      if (andCpLabelRef != oldAndCpLabelRef)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GbasmPackage.AND_CP__AND_CP_LABEL_REF, oldAndCpLabelRef, andCpLabelRef));
      }
    }
    return andCpLabelRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LabelOrConstant basicGetAndCpLabelRef()
  {
    return andCpLabelRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAndCpLabelRef(LabelOrConstant newAndCpLabelRef)
  {
    LabelOrConstant oldAndCpLabelRef = andCpLabelRef;
    andCpLabelRef = newAndCpLabelRef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GbasmPackage.AND_CP__AND_CP_LABEL_REF, oldAndCpLabelRef, andCpLabelRef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GbasmPackage.AND_CP__AND_CP_LABEL_REF:
        if (resolve) return getAndCpLabelRef();
        return basicGetAndCpLabelRef();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GbasmPackage.AND_CP__AND_CP_LABEL_REF:
        setAndCpLabelRef((LabelOrConstant)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GbasmPackage.AND_CP__AND_CP_LABEL_REF:
        setAndCpLabelRef((LabelOrConstant)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GbasmPackage.AND_CP__AND_CP_LABEL_REF:
        return andCpLabelRef != null;
    }
    return super.eIsSet(featureID);
  }

} //AndCpImpl
