/**
 * generated by Xtext 2.26.0
 */
package org.zumi.xtext.gbasm.gbasm.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.zumi.xtext.gbasm.gbasm.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class GbasmFactoryImpl extends EFactoryImpl implements GbasmFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static GbasmFactory init()
  {
    try
    {
      GbasmFactory theGbasmFactory = (GbasmFactory)EPackage.Registry.INSTANCE.getEFactory(GbasmPackage.eNS_URI);
      if (theGbasmFactory != null)
      {
        return theGbasmFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new GbasmFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GbasmFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case GbasmPackage.ASM: return createAsm();
      case GbasmPackage.LABEL_OR_CONSTANT: return createLabelOrConstant();
      case GbasmPackage.STATEMENT: return createStatement();
      case GbasmPackage.LOCAL_LABEL: return createLocalLabel();
      case GbasmPackage.INSTRUCTION: return createInstruction();
      case GbasmPackage.LD: return createLd();
      case GbasmPackage.LABEL_REFERENCE: return createLabelReference();
      case GbasmPackage.BANK_REFERENCE: return createBankReference();
      case GbasmPackage.AND_CP: return createAndCp();
      case GbasmPackage.CALL_OR_JUMP: return createCallOrJump();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Asm createAsm()
  {
    AsmImpl asm = new AsmImpl();
    return asm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LabelOrConstant createLabelOrConstant()
  {
    LabelOrConstantImpl labelOrConstant = new LabelOrConstantImpl();
    return labelOrConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocalLabel createLocalLabel()
  {
    LocalLabelImpl localLabel = new LocalLabelImpl();
    return localLabel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Instruction createInstruction()
  {
    InstructionImpl instruction = new InstructionImpl();
    return instruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ld createLd()
  {
    LdImpl ld = new LdImpl();
    return ld;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LabelReference createLabelReference()
  {
    LabelReferenceImpl labelReference = new LabelReferenceImpl();
    return labelReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BankReference createBankReference()
  {
    BankReferenceImpl bankReference = new BankReferenceImpl();
    return bankReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndCp createAndCp()
  {
    AndCpImpl andCp = new AndCpImpl();
    return andCp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CallOrJump createCallOrJump()
  {
    CallOrJumpImpl callOrJump = new CallOrJumpImpl();
    return callOrJump;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GbasmPackage getGbasmPackage()
  {
    return (GbasmPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static GbasmPackage getPackage()
  {
    return GbasmPackage.eINSTANCE;
  }

} //GbasmFactoryImpl
