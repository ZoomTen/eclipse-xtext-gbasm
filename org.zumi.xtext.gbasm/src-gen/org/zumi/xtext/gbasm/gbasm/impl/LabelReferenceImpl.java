/**
 * generated by Xtext 2.26.0
 */
package org.zumi.xtext.gbasm.gbasm.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.zumi.xtext.gbasm.gbasm.GbasmPackage;
import org.zumi.xtext.gbasm.gbasm.LabelOrConstant;
import org.zumi.xtext.gbasm.gbasm.LabelReference;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Label Reference</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.zumi.xtext.gbasm.gbasm.impl.LabelReferenceImpl#getRefLabel <em>Ref Label</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LabelReferenceImpl extends LdImpl implements LabelReference
{
  /**
   * The cached value of the '{@link #getRefLabel() <em>Ref Label</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRefLabel()
   * @generated
   * @ordered
   */
  protected LabelOrConstant refLabel;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LabelReferenceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GbasmPackage.Literals.LABEL_REFERENCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LabelOrConstant getRefLabel()
  {
    if (refLabel != null && refLabel.eIsProxy())
    {
      InternalEObject oldRefLabel = (InternalEObject)refLabel;
      refLabel = (LabelOrConstant)eResolveProxy(oldRefLabel);
      if (refLabel != oldRefLabel)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GbasmPackage.LABEL_REFERENCE__REF_LABEL, oldRefLabel, refLabel));
      }
    }
    return refLabel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LabelOrConstant basicGetRefLabel()
  {
    return refLabel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRefLabel(LabelOrConstant newRefLabel)
  {
    LabelOrConstant oldRefLabel = refLabel;
    refLabel = newRefLabel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GbasmPackage.LABEL_REFERENCE__REF_LABEL, oldRefLabel, refLabel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GbasmPackage.LABEL_REFERENCE__REF_LABEL:
        if (resolve) return getRefLabel();
        return basicGetRefLabel();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GbasmPackage.LABEL_REFERENCE__REF_LABEL:
        setRefLabel((LabelOrConstant)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GbasmPackage.LABEL_REFERENCE__REF_LABEL:
        setRefLabel((LabelOrConstant)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GbasmPackage.LABEL_REFERENCE__REF_LABEL:
        return refLabel != null;
    }
    return super.eIsSet(featureID);
  }

} //LabelReferenceImpl
