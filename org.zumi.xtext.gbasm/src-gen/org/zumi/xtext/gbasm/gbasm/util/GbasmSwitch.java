/**
 * generated by Xtext 2.26.0
 */
package org.zumi.xtext.gbasm.gbasm.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.zumi.xtext.gbasm.gbasm.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.zumi.xtext.gbasm.gbasm.GbasmPackage
 * @generated
 */
public class GbasmSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static GbasmPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GbasmSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = GbasmPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case GbasmPackage.ASM:
      {
        Asm asm = (Asm)theEObject;
        T result = caseAsm(asm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GbasmPackage.LABEL_OR_CONSTANT:
      {
        LabelOrConstant labelOrConstant = (LabelOrConstant)theEObject;
        T result = caseLabelOrConstant(labelOrConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GbasmPackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GbasmPackage.LOCAL_LABEL:
      {
        LocalLabel localLabel = (LocalLabel)theEObject;
        T result = caseLocalLabel(localLabel);
        if (result == null) result = caseStatement(localLabel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GbasmPackage.INSTRUCTION:
      {
        Instruction instruction = (Instruction)theEObject;
        T result = caseInstruction(instruction);
        if (result == null) result = caseStatement(instruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GbasmPackage.LD:
      {
        Ld ld = (Ld)theEObject;
        T result = caseLd(ld);
        if (result == null) result = caseInstruction(ld);
        if (result == null) result = caseStatement(ld);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GbasmPackage.LABEL_REFERENCE:
      {
        LabelReference labelReference = (LabelReference)theEObject;
        T result = caseLabelReference(labelReference);
        if (result == null) result = caseLd(labelReference);
        if (result == null) result = caseInstruction(labelReference);
        if (result == null) result = caseStatement(labelReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GbasmPackage.BANK_REFERENCE:
      {
        BankReference bankReference = (BankReference)theEObject;
        T result = caseBankReference(bankReference);
        if (result == null) result = caseLd(bankReference);
        if (result == null) result = caseInstruction(bankReference);
        if (result == null) result = caseStatement(bankReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GbasmPackage.AND_CP:
      {
        AndCp andCp = (AndCp)theEObject;
        T result = caseAndCp(andCp);
        if (result == null) result = caseInstruction(andCp);
        if (result == null) result = caseStatement(andCp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GbasmPackage.CALL_OR_JUMP:
      {
        CallOrJump callOrJump = (CallOrJump)theEObject;
        T result = caseCallOrJump(callOrJump);
        if (result == null) result = caseInstruction(callOrJump);
        if (result == null) result = caseStatement(callOrJump);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Asm</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Asm</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAsm(Asm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Label Or Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Label Or Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLabelOrConstant(LabelOrConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Local Label</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Local Label</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLocalLabel(LocalLabel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInstruction(Instruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ld</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ld</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLd(Ld object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Label Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Label Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLabelReference(LabelReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bank Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bank Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBankReference(BankReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And Cp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And Cp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAndCp(AndCp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Call Or Jump</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Call Or Jump</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCallOrJump(CallOrJump object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //GbasmSwitch
