/**
 * generated by Xtext 2.26.0
 */
package org.zumi.xtext.gbasm.gbasm.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.zumi.xtext.gbasm.gbasm.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.zumi.xtext.gbasm.gbasm.GbasmPackage
 * @generated
 */
public class GbasmAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static GbasmPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GbasmAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = GbasmPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GbasmSwitch<Adapter> modelSwitch =
    new GbasmSwitch<Adapter>()
    {
      @Override
      public Adapter caseAsm(Asm object)
      {
        return createAsmAdapter();
      }
      @Override
      public Adapter caseLabelOrConstant(LabelOrConstant object)
      {
        return createLabelOrConstantAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseLocalLabel(LocalLabel object)
      {
        return createLocalLabelAdapter();
      }
      @Override
      public Adapter caseInstruction(Instruction object)
      {
        return createInstructionAdapter();
      }
      @Override
      public Adapter caseLd(Ld object)
      {
        return createLdAdapter();
      }
      @Override
      public Adapter caseLabelReference(LabelReference object)
      {
        return createLabelReferenceAdapter();
      }
      @Override
      public Adapter caseBankReference(BankReference object)
      {
        return createBankReferenceAdapter();
      }
      @Override
      public Adapter caseAndCp(AndCp object)
      {
        return createAndCpAdapter();
      }
      @Override
      public Adapter caseCallOrJump(CallOrJump object)
      {
        return createCallOrJumpAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.zumi.xtext.gbasm.gbasm.Asm <em>Asm</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.zumi.xtext.gbasm.gbasm.Asm
   * @generated
   */
  public Adapter createAsmAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.zumi.xtext.gbasm.gbasm.LabelOrConstant <em>Label Or Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.zumi.xtext.gbasm.gbasm.LabelOrConstant
   * @generated
   */
  public Adapter createLabelOrConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.zumi.xtext.gbasm.gbasm.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.zumi.xtext.gbasm.gbasm.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.zumi.xtext.gbasm.gbasm.LocalLabel <em>Local Label</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.zumi.xtext.gbasm.gbasm.LocalLabel
   * @generated
   */
  public Adapter createLocalLabelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.zumi.xtext.gbasm.gbasm.Instruction <em>Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.zumi.xtext.gbasm.gbasm.Instruction
   * @generated
   */
  public Adapter createInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.zumi.xtext.gbasm.gbasm.Ld <em>Ld</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.zumi.xtext.gbasm.gbasm.Ld
   * @generated
   */
  public Adapter createLdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.zumi.xtext.gbasm.gbasm.LabelReference <em>Label Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.zumi.xtext.gbasm.gbasm.LabelReference
   * @generated
   */
  public Adapter createLabelReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.zumi.xtext.gbasm.gbasm.BankReference <em>Bank Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.zumi.xtext.gbasm.gbasm.BankReference
   * @generated
   */
  public Adapter createBankReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.zumi.xtext.gbasm.gbasm.AndCp <em>And Cp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.zumi.xtext.gbasm.gbasm.AndCp
   * @generated
   */
  public Adapter createAndCpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.zumi.xtext.gbasm.gbasm.CallOrJump <em>Call Or Jump</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.zumi.xtext.gbasm.gbasm.CallOrJump
   * @generated
   */
  public Adapter createCallOrJumpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //GbasmAdapterFactory
